[{"title":"运动饮食1:9——读书笔记一","date":"2017-02-21T15:19:20.000Z","path":"2017/02/21/运动饮食1-9——读书笔记一/","text":"读书笔记第一章_迈开腿不如管住嘴 运动减肥是个伪命题有氧运动只是看上去很美基础代谢对于减肥的作用被神话了为减肥而运动很难坚持减肥的唯一诀窍：改变饮食习惯 正视自己&ensp;&ensp;&ensp;&ensp;在这本书的第一张，我们首先要正视自己，我们不是什么身体体格异于常人的非正常人，我们只是吃多了就会变胖，不运动身体的健康程度就会有一定程度下降的正常人而已。 运动不是万能的&ensp;&ensp;&ensp;&ensp;很多人认为只要是运动，我就能减肥，我就能瘦，或者是我就能长肌肉。呵呵，这种思想是傻子吧。减肥，旨在消耗身体多余的能量，如果跑步20分钟之后，然后吃两块巧克力蛋糕，那能不长肉嘛。然而同时，纯粹的有氧运动太过于单一，对于减肥有作用，但是作用的效果大部分不是很强大。需要对应一些其它的力量训练，让细胞活跃起来，增加他们的耗氧量，从而达到更多消耗的目的。总之，训练要多元化，不要专注与一方面死啃。 肌肉愈多，每天的消耗量就越大？&ensp;&ensp;&ensp;&ensp;这个说法全错吗？不是的，有一定的正确性，但是如果每天只靠肌肉的消耗量，就能达到减肥的效果吗？这个就是绝对否定的了。毕竟肌肉多的人，每天的摄入量肯定是大于肌肉的消耗，为了维持身形，还是要坚持运动，只有勤奋和一定的专业性才能够练就好的身形。 运动太难？&ensp;&ensp;&ensp;&ensp;很多人发现减肥很难，减肥多年不见效果。我只能笑笑了，你自己把减肥当成负担，减肥带给你的压力当然无法转换成动力，然后转换成好的身材啊。我们要转移一定的思想，把运动变成生活的一部分，每天去上班的走路时间，变成小跑，或者睡前来组俯卧撑，把生活想要偷懒前的几分钟利用一下，不用说能够练就很好的身材，只要健康是没问题的。 吃的问题！&ensp;&ensp;&ensp;&ensp;吃，决定我们一天的精神状态。太油，会感到一定的乏力；太素，一天又没有精神。所以，我们要以吃的关键作为出发点，去找到自身的摄入和运动消耗的平衡。无论是自己做还是外卖，相信都可以找到平衡点，就看自己的选择了。","comments":true,"tags":[{"name":"健身","slug":"健身","permalink":"http://a5566baga.cn/tags/健身/"}]},{"title":"Hinerante注解配置表间关系","date":"2017-02-21T15:07:42.000Z","path":"2017/02/21/Hinerante注解配置表间关系/","text":"通过注解配置表间的关系 学生和班级是——学生（多）——班级（一）老师和班级是——老师（多）——班级（多）老师和工卡是——老师（一）——工卡（一） Student.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package com.ben.pojo;import java.io.Serializable;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.JoinColumn;import javax.persistence.ManyToOne;import javax.persistence.Table;@Entity@Table(name = \"student\", catalog = \"school\")public class Student implements Serializable &#123; @Id @Column(name = \"sid\") @GeneratedValue(strategy = GenerationType.AUTO) private Integer sid; @Column(name = \"sname\") private String sname; @Column(name = \"sex\") private String sex; @ManyToOne(cascade = CascadeType.ALL) @JoinColumn(name=\"gid\") private Grade grade; public Integer getSid() &#123; return sid; &#125; public void setSid(Integer sid) &#123; this.sid = sid; &#125; public String getSname() &#123; return sname; &#125; public void setSname(String sname) &#123; this.sname = sname; &#125; public String getSex() &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex = sex; &#125; public Grade getGrade() &#123; return grade; &#125; public void setGrade(Grade grade) &#123; this.grade = grade; &#125; public Student() &#123; super(); &#125; public Student(String sname, String sex) &#123; super(); this.sname = sname; this.sex = sex; &#125;&#125; Grade.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091package com.ben.pojo;import java.io.Serializable;import java.util.HashSet;import java.util.Set;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.JoinColumn;import javax.persistence.JoinTable;import javax.persistence.ManyToMany;import javax.persistence.OneToMany;import javax.persistence.Table;@Entity@Table(name=\"grade\", catalog = \"school\")public class Grade implements Serializable &#123; @Id @Column(name=\"gid\") @GeneratedValue(strategy=GenerationType.AUTO) private Integer gid; @Column(name=\"gname\") private String gname; @Column(name=\"gdesc\") private String gdesc; @OneToMany(cascade=CascadeType.ALL, mappedBy=\"grade\") private Set&lt;Student&gt; students = new HashSet&lt;&gt;(0); @ManyToMany(cascade=CascadeType.ALL) @JoinTable(name=\"tea_grade\",joinColumns=&#123;@JoinColumn(name=\"g_id\",referencedColumnName=\"gid\")&#125;, inverseJoinColumns=&#123;@JoinColumn(name=\"t_id\",referencedColumnName=\"id\")&#125;) private Set&lt;Teachers&gt; teachers = new HashSet&lt;&gt;(0); public Integer getGid() &#123; return gid; &#125; public void setGid(Integer gid) &#123; this.gid = gid; &#125; public String getGname() &#123; return gname; &#125; public void setGname(String gname) &#123; this.gname = gname; &#125; public String getGdesc() &#123; return gdesc; &#125; public void setGdesc(String gdesc) &#123; this.gdesc = gdesc; &#125; public Set&lt;Student&gt; getStudents() &#123; return students; &#125; public void setStudents(Set&lt;Student&gt; students) &#123; this.students = students; &#125; public Set&lt;Teachers&gt; getTeachers() &#123; return teachers; &#125; public void setTeachers(Set&lt;Teachers&gt; teachers) &#123; this.teachers = teachers; &#125; public Grade() &#123; super(); &#125; public Grade(String gname, String gdesc) &#123; super(); this.gname = gname; this.gdesc = gdesc; &#125;&#125; Teachers.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283package com.ben.pojo;import java.io.Serializable;import java.util.HashSet;import java.util.Set;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.JoinColumn;import javax.persistence.JoinTable;import javax.persistence.ManyToMany;import javax.persistence.OneToOne;import javax.persistence.Table;/* * 教师与班级有多对多的关系 */@Entity@Table(name=\"teachers\",catalog=\"school\")public class Teachers implements Serializable &#123; @Id @Column(name=\"id\") @GeneratedValue(strategy=GenerationType.AUTO) private Integer id; @Column(name=\"t_name\") private String tName; @OneToOne(cascade=CascadeType.ALL,mappedBy=\"teacher\") private Card card; @ManyToMany(cascade=CascadeType.ALL) @JoinTable(name=\"tea_grade\",joinColumns=&#123;@JoinColumn(name=\"t_id\",referencedColumnName=\"id\")&#125;, inverseJoinColumns=&#123;@JoinColumn(name=\"g_id\",referencedColumnName=\"gid\")&#125;) private Set&lt;Grade&gt; grades = new HashSet&lt;&gt;(0); public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String gettName() &#123; return tName; &#125; public void settName(String tName) &#123; this.tName = tName; &#125; public Set&lt;Grade&gt; getGrades() &#123; return grades; &#125; public void setGrades(Set&lt;Grade&gt; grades) &#123; this.grades = grades; &#125; public Card getCard() &#123; return card; &#125; public void setCard(Card card) &#123; this.card = card; &#125; public Teachers() &#123; super(); &#125; public Teachers(String tName) &#123; super(); this.tName = tName; &#125;&#125; Card.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package com.ben.pojo;import java.io.Serializable;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.Id;import javax.persistence.OneToOne;import javax.persistence.PrimaryKeyJoinColumn;import javax.persistence.Table;import org.hibernate.annotations.GenericGenerator;import org.hibernate.annotations.Parameter;@Entity@Table(name=\"card\",catalog=\"school\")public class Card implements Serializable &#123; @Id @Column(name=\"t_id\") @GenericGenerator(name = \"generator\", strategy = \"foreign\", parameters = &#123; @Parameter(name = \"property\", value = \"teacher\") &#125;) @GeneratedValue(generator = \"generator\") private Integer tId; @OneToOne(cascade=CascadeType.ALL) @PrimaryKeyJoinColumn private Teachers teacher; @Column(name=\"card_num\") private String cardNum; public Integer gettId() &#123; return tId; &#125; public void settId(Integer tId) &#123; this.tId = tId; &#125; public Teachers getTeacher() &#123; return teacher; &#125; public void setTeacher(Teachers teacher) &#123; this.teacher = teacher; &#125; public String getCardNum() &#123; return cardNum; &#125; public void setCardNum(String cardNum) &#123; this.cardNum = cardNum; &#125; public Card() &#123; super(); &#125; public Card(Teachers teacher, String cardNum) &#123; super(); this.teacher = teacher; this.cardNum = cardNum; &#125;&#125; DAO和测试自己测试即可","comments":true,"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://a5566baga.cn/tags/JAVA/"},{"name":"Hinerante","slug":"Hinerante","permalink":"http://a5566baga.cn/tags/Hinerante/"}]},{"title":"Node.js中MySQL的使用","date":"2017-02-20T12:53:15.000Z","path":"2017/02/20/Node-js中MySQL的使用/","text":"Node.js的MySQL数据库的使用下载地址 数据库的分类 关系型数据库非关系型数据库 关系型数据库组成 数据库：数据库是一些关联表的集合 数据表：表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。 行：一条数据。 列：相同类型的数据 认识MySQL数据库 MySQL是一个关系型数据库管理系统，有瑞典MySQL AB公司开发，目前属于Oracle公司。 MySQL是最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的RDBMS(Relational Database Managerment System:关系数据库管理系统)应用软件之一。 MariaDB数据库 MariaDB数据库管理是MySQL的一个分支，主要是有开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式避开这个风险。实际使用与MySQL相同。 MySQL保存数据类型 数值类型 字符串类型 时间日期类型 SQL语句 添加数据1INSERT INTO `mydb`.`news` (`id`, `title`, `time`, `content`, `src`) VALUES (NULL, '测试第一条新闻', '2017-02-13 14:17:32', '测试正文', '生活') 查找数据一般查询 1SELECT `id`, `title`, `time`, `content`, `src` FROM `news` WHERE `id` = 1 1SELECT * FROM `news` WHERE `id` = 2 子查询12345678910111213SELECT *FROM `news`WHERE `id` = ( SELECT `id` FROM `news` WHERE `src` = '科技' ) ORDER BY查询 GROUP BY查询 HAVING 查询 左外连接查询 右外连接查询 修改数据123456789UPDATE `mydb`.`news`SET `title` = '标题二', `time` = '2017-02-01 14:17:32', `content` = '测试正文二内容水水水水', `src` = '人文'WHERE `news`.`id` = 2 删除数据1DELETE FROM `news` WHERE `id`=1 npm安装mysql包1$ npm install mysql 1$ npm install mysqljs/mysql 内容设置1234567891011121314151617var mysql = require('mysql');var connection = mysql.createConnection(&#123; host : 'localhost', port : 3306, user : 'me', password : 'secret', database : 'my_db'&#125;);connection.connect();connection.query('SELECT 1 + 1 AS solution', function (error, results, fields) &#123; if (error) throw error; console.log('The solution is: ', results[0].solution);&#125;);connection.end();","comments":true,"tags":[{"name":"前台","slug":"前台","permalink":"http://a5566baga.cn/tags/前台/"},{"name":"Node.js","slug":"Node-js","permalink":"http://a5566baga.cn/tags/Node-js/"}]},{"title":"Hibernate一对一关系映射","date":"2017-02-20T12:52:40.000Z","path":"2017/02/20/Hibernate一对一关系映射/","text":"一对一关系表与表之间互相对应，各式互相的唯一 常用的例子是：身份证和人之间的关系，或是工作证与个人的关系，我这里举例老师和工作证的关系。 teachers表 字段名 类型 约束 id int 主键 t_name varchar card表 字段名 类型 约束 card_num varchar t_id int 主键/外键 Teachers.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package com.ben.pojo;import java.io.Serializable;import java.util.HashSet;import java.util.Set;public class Teachers implements Serializable &#123; private Integer id; private String tName; //card对象 private Card card; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String gettName() &#123; return tName; &#125; public void settName(String tName) &#123; this.tName = tName; &#125; public Card getCard() &#123; return card; &#125; public void setCard(Card card) &#123; this.card = card; &#125; public Teachers() &#123; super(); &#125; public Teachers(String tName) &#123; super(); this.tName = tName; &#125;&#125; Card.java注意：一个tId设置为主键；一个teacher设置为外键的对象。 即——主键表因为主外键都是一个字段，所以在域对象设定的时候要设置主键和外键。 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.ben.pojo;import java.io.Serializable;public class Card implements Serializable &#123; private Integer tId; private Teachers teacher; private String cardNum; public Integer gettId() &#123; return tId; &#125; public void settId(Integer tId) &#123; this.tId = tId; &#125; public Teachers getTeacher() &#123; return teacher; &#125; public void setTeacher(Teachers teacher) &#123; this.teacher = teacher; &#125; public String getCardNum() &#123; return cardNum; &#125; public void setCardNum(String cardNum) &#123; this.cardNum = cardNum; &#125; public Card() &#123; super(); &#125; public Card(Teachers teacher, String cardNum) &#123; super(); this.teacher = teacher; this.cardNum = cardNum; &#125;&#125; Teachers.hbm.xml注意：外键表，要设置级联关系 1234567891011121314151617181920212223&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping&gt; &lt;class name=\"com.ben.pojo.Teachers\" table=\"teachers\"&gt; &lt;id name=\"id\" column=\"id\" type=\"java.lang.Integer\"&gt; &lt;generator class=\"native\"&gt;&lt;/generator&gt; &lt;/id&gt; &lt;property name=\"tName\" type=\"java.lang.String\"&gt; &lt;column name=\"t_name\"&gt;&lt;/column&gt; &lt;/property&gt; &lt;!-- &lt;set name=\"grades\" cascade=\"save-update\"&gt; &lt;key column=\"gid\"&gt;&lt;/key&gt; &lt;many-to-many&gt;&lt;/many-to-many&gt; &lt;/set&gt; --&gt; &lt;!-- 一对一,外键表配置级联关系 --&gt; &lt;one-to-one name=\"card\" class=\"com.ben.pojo.Card\" cascade=\"all\"&gt;&lt;/one-to-one&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; Card.hbm.xml注意：这里主键的生成方式为&apos;foreign&apos;。 &lt;param name=&quot;property&quot;&gt;&lt;/param&gt;中间的参数与下文配置的name相同 1234567891011121314151617181920&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping&gt; &lt;class name=\"com.ben.pojo.Card\" table=\"card\"&gt; &lt;id name=\"tId\" column=\"t_id\" type=\"java.lang.Integer\"&gt; &lt;generator class=\"foreign\"&gt; &lt;param name=\"property\"&gt;teacher&lt;/param&gt; &lt;/generator&gt; &lt;/id&gt; &lt;property name=\"cardNum\" type=\"java.lang.String\"&gt; &lt;column name=\"card_num\"&gt;&lt;/column&gt; &lt;/property&gt; &lt;!-- 一对一 --&gt; &lt;one-to-one name=\"teacher\" class=\"com.ben.pojo.Teachers\"&gt;&lt;/one-to-one&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; 测试用例123456789101112@Testpublic void test() &#123; Session session = MySessionFactory.getSession(); Transaction tx = session.beginTransaction(); Teachers t = new Teachers(\"laoshi2\"); Card c = new Card(t, \"11223344556688\"); t.setCard(c); session.save(t); tx.commit();&#125; 注意，在创建Teachers对象后，不要忘记设置Card，否则保存Teachers对象会不保存Card的。但是这时保存Card会保存Teachers对象，自己要理好关系。 1234567891011121314Hibernate: insert into teachers (t_name) values (?)Hibernate: insert into card (card_num, t_id) values (?, ?)","comments":true,"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://a5566baga.cn/tags/JAVA/"},{"name":"Hibernate","slug":"Hibernate","permalink":"http://a5566baga.cn/tags/Hibernate/"}]},{"title":"我的作品集","date":"2017-02-19T12:45:06.000Z","path":"2017/02/19/我的作品集/","text":"作品展示 前台作品 照片墙QQVip静态页面网易云音乐视频页面斗鱼页面播放页面bootstrap练习页面2048皮卡丘跑酷 Java项目 BBS论坛JavaWeb工作室网站在线考试系统学生管理系统鲜花在线销售平台 iOS作品 周末去哪耍爱生活爱烘焙疯狂小鸟鸟看博客书评Love 前台作品照片墙 QQVip静态页面 网易云音乐视频页面 斗鱼页面播放页面 bootstrap练习页面 2048 皮卡丘跑酷 Java项目BBS论坛 JavaWeb工作室网站 在线考试系统 学生管理系统 鲜花在线销售平台 iOS作品周末去哪耍 爱生活爱烘焙 疯狂小鸟鸟 看博客 书评Love","comments":true,"tags":[{"name":"足球生活","slug":"足球生活","permalink":"http://a5566baga.cn/tags/足球生活/"}]},{"title":"Express运用AJAX","date":"2017-02-18T07:56:06.000Z","path":"2017/02/18/Express运用AJAX/","text":"AJAX什么是AJAX目的是为了减少表单在过程中过多请求相同页面导致的带宽浪费问题，同时可以减少表单填写错误而必须填写整套表单而带来的用户体验下滑。 创建XMLHttpRequest 状态机 01234 可以增强用户体验 0：刚开始 1：开始 2：刚接受头部 3：下载响应体 4：搞定完成 注册验证小例子index.js路由配置中123456789router.get('/checkname', function (req, res, next) &#123; var username = req.query.username; var str = 'zzq'; if(str === username)&#123; res.send(username + '已经存在'); &#125;else&#123; res.send('用户名可以使用'); &#125;&#125;); index.ejs页面设置12&lt;input type=\"text\" name=\"username\" value=\"\" id=\"username\"&gt;&lt;span id=\"info\"&gt;&lt;/span&gt; js代码123456789101112131415&lt;script type=\"text/javascript\"&gt; var req = new XMLHttpRequest(); var input = document.getElementById('username'); var info = document.getElementById('info'); input.addEventListener(\"blur\",function (e) &#123; //get请求，数据随url传输 req.open('get','/checkname?username='+input.value); req.send(); req.onreadystatechange = function () &#123; if(req.readyState === 4)&#123; info.innerHTML = req.responseText; &#125; &#125; &#125;);&lt;/script&gt; 注意： var req = new XMLHttpRequest(); 1.接受数据——req.responseText; router.get(&apos;/checkname&apos;, function (req, res, next) 1.路由接收get参数——var username = req.query.username; 2.路由接收post参数——req.body.username; 从后端向前段传JSON数据页面文件js内容(用JQuery写)123456789101112131415161718192021&lt;script type=\"text/javascript\"&gt; $(document).ready(function () &#123; $('button').click(function (e) &#123; $.ajax(&#123; url:'/getZZ', type:'get', data:&#123;name:'zzq'&#125;, success:function (data) &#123; // 从后端取数据，并动态显示于页面 // 后端数据在data中 $('&lt;h1&gt;&lt;/h1&gt;').addClass('title').text(data.title).appendTo($('#container')); $('&lt;h2&gt;&lt;/h2&gt;').addClass('des').text(data.src).appendTo($('#container')); $('&lt;p&gt;&lt;/p&gt;').addClass('content').text(data.content).appendTo($('#container')); &#125;, error:function (err) &#123; &#125; &#125;); &#125;); &#125;);&lt;/script&gt; 路由index.js配置12345678router.get('/getzz', function (req, res, next) &#123; var obj = &#123; title:'今日头条:lalalalalla', src:'今日来源:hehehehehehe', content:'buzhiodao 不知道。。。。' &#125; res.json(obj);&#125;); 注意：post写法相同，但传递的方式不同，接收用req.body接收 跨域访问什么是源源是指资源，网络中能请求到的都是资源。请求资源需要使用统一资源定位符。(Uniform Resource Locator,简称URL) 什么是同源两个页面拥有相同的协议、端口、主机域名，name这两个就是同源页面。 跨域请求中间件文档网站12345app.use(function(req, res, next) &#123; res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next();&#125;);","comments":true,"tags":[{"name":"前台","slug":"前台","permalink":"http://a5566baga.cn/tags/前台/"},{"name":"Node.js","slug":"Node-js","permalink":"http://a5566baga.cn/tags/Node-js/"}]},{"title":"hibernate4.3一对多基本配置","date":"2017-02-18T07:37:46.000Z","path":"2017/02/18/hibernate4-3一对多基本配置/","text":"表与表之间的关联映射（ 基于Hibernate4.3） 单向一对多配置单向多对一配置双向一对多配置其它属性 单向一对多的关系（基本配置） 在数据库中，可以通过添加主外键的关联，表现一对多的关系 通过一方持有多方的集合实现，即在“一”的一端中使用元素表示持有“多”的一端的现象 配置的时候要在一的一方创建多的一方的set集合，同时xml文件中配置对应多的一方的外键值。这时候多方pojo中的属性是一方的id。 hibernate.cfg.xml12345678910111213141516171819202122232425&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;&lt;hibernate-configuration&gt; &lt;session-factory&gt; &lt;property name=\"hibernate.dialect\"&gt; org.hibernate.dialect.MySQLDialect &lt;/property&gt; &lt;property name=\"hibernate.connection.url\"&gt; jdbc:mysql://localhost:3306/school &lt;/property&gt; &lt;property name=\"hibernate.connection.username\"&gt;root&lt;/property&gt; &lt;property name=\"hibernate.connection.password\"&gt;123456&lt;/property&gt; &lt;property name=\"hibernate.connection.driver_class\"&gt; com.mysql.jdbc.Driver &lt;/property&gt; &lt;property name=\"show_sql\"&gt;true&lt;/property&gt; &lt;property name=\"format_sql\"&gt;true&lt;/property&gt; &lt;mapping resource=\"com/ben/pojo/Student.hbm.xml\"&gt;&lt;/mapping&gt; &lt;mapping resource=\"com/ben/pojo/Grade.hbm.xml\"&gt;&lt;/mapping&gt; &lt;/session-factory&gt;&lt;/hibernate-configuration&gt; Grade.java（一的一方）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package com.ben.pojo;import java.io.Serializable;import java.util.HashSet;import java.util.Set;public class Grade implements Serializable &#123; private Integer gid; private String gname; private String gdesc; private Set&lt;Student&gt; students = new HashSet&lt;&gt;(0); public Integer getGid() &#123; return gid; &#125; public void setGid(Integer gid) &#123; this.gid = gid; &#125; public String getGname() &#123; return gname; &#125; public void setGname(String gname) &#123; this.gname = gname; &#125; public String getGdesc() &#123; return gdesc; &#125; public void setGdesc(String gdesc) &#123; this.gdesc = gdesc; &#125; public Set&lt;Student&gt; getStudents() &#123; return students; &#125; public void setStudents(Set&lt;Student&gt; students) &#123; this.students = students; &#125; public Grade() &#123; super(); &#125; public Grade(String gname, String gdesc) &#123; super(); this.gname = gname; this.gdesc = gdesc; &#125;&#125; Student.java (多的一方)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.ben.pojo;import java.io.Serializable;public class Student implements Serializable &#123; private Integer sid; private String sname; private String sex; private Integer gid; public Integer getSid() &#123; return sid; &#125; public void setSid(Integer sid) &#123; this.sid = sid; &#125; public String getSname() &#123; return sname; &#125; public void setSname(String sname) &#123; this.sname = sname; &#125; public String getSex() &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex = sex; &#125; public Integer getGid() &#123; return gid; &#125; public void setGid(Integer gid) &#123; this.gid = gid; &#125; public Student() &#123; super(); &#125; public Student(String sname, String sex) &#123; super(); this.sname = sname; this.sex = sex; &#125;&#125; Grade.hbm.xml123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping&gt; &lt;class name=\"com.ben.pojo.Grade\" table=\"grade\"&gt; &lt;id name=\"gid\" column=\"gid\" type=\"java.lang.Integer\"&gt; &lt;generator class=\"native\"&gt;&lt;/generator&gt; &lt;/id&gt; &lt;property name=\"gname\" type=\"java.lang.String\"&gt; &lt;column name=\"gname\"&gt;&lt;/column&gt; &lt;/property&gt; &lt;property name=\"gdesc\" type=\"java.lang.String\"&gt; &lt;column name=\"gdesc\"&gt;&lt;/column&gt; &lt;/property&gt; &lt;!-- name 对应的是集合名 --&gt; &lt;set name=\"students\"&gt; &lt;!-- key对应的是多方的外键 --&gt; &lt;key column=\"gid\"&gt;&lt;/key&gt; &lt;one-to-many class=\"com.ben.pojo.Student\"/&gt; &lt;/set&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; Student.hbm.xml123456789101112131415161718&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping&gt; &lt;class name=\"com.ben.pojo.Student\" table=\"student\"&gt; &lt;id name=\"sid\" column=\"sid\" type=\"java.lang.Integer\"&gt; &lt;generator class=\"native\"&gt;&lt;/generator&gt; &lt;/id&gt; &lt;property name=\"sname\" type=\"java.lang.String\"&gt; &lt;column name=\"sname\"&gt;&lt;/column&gt; &lt;/property&gt; &lt;property name=\"sex\" type=\"java.lang.String\"&gt; &lt;column name=\"sex\"&gt;&lt;/column&gt; &lt;/property&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; SessionFactory配置，加载配置文件代码123456789101112131415161718192021222324252627282930313233343536package com.ben.factory;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.boot.registry.StandardServiceRegistry;import org.hibernate.boot.registry.StandardServiceRegistryBuilder;import org.hibernate.cfg.Configuration;public class MySessionFactory &#123; static private SessionFactory sessionFactory; static private Session session; static &#123; Configuration config = new Configuration().configure(); StandardServiceRegistryBuilder ssrb = new StandardServiceRegistryBuilder() .applySettings(config.getProperties()); StandardServiceRegistry ssr=ssrb.build(); sessionFactory=config.buildSessionFactory(ssr); &#125; public static SessionFactory getSessionFactory() &#123; return sessionFactory; &#125; public static Session getSession() &#123; session = getSessionFactory().openSession(); return session; &#125; public static void closeSession(Session session) &#123; if (session != null) &#123; session.close(); &#125; &#125;&#125; 之后的CRUD操作用JUnit测试即可 set元素的常用属性 属性 含义和作用 必须 默认值 name 映射类属性的名称 Y table 关联类的目标数据库表 N lazy 指定关联对象是否使用延迟加载 NO proxy inverse 标识双向关联中被动的一方 N false 单向多对一的关系（基本配置） 多对一的关系和关系数据库中的外键参照关系最匹配，即在己方的表中的一个外键参照另一个表的主键 通过在多方持有一方的引用实现，需要在“多”的一端使用配置 学生和班级的关系，就是在学生的xml中配置 Grade.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.ben.pojo;import java.io.Serializable;import java.util.HashSet;import java.util.Set;public class Grade implements Serializable &#123; private Integer gid; private String gname; private String gdesc; public Integer getGid() &#123; return gid; &#125; public void setGid(Integer gid) &#123; this.gid = gid; &#125; public String getGname() &#123; return gname; &#125; public void setGname(String gname) &#123; this.gname = gname; &#125; public String getGdesc() &#123; return gdesc; &#125; public void setGdesc(String gdesc) &#123; this.gdesc = gdesc; &#125; public Grade() &#123; super(); &#125; public Grade(String gname, String gdesc) &#123; super(); this.gname = gname; this.gdesc = gdesc; &#125;&#125; Student.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.ben.pojo;import java.io.Serializable;public class Student implements Serializable &#123; private Integer sid; private String sname; private String sex; private Grade grade; public Integer getSid() &#123; return sid; &#125; public void setSid(Integer sid) &#123; this.sid = sid; &#125; public String getSname() &#123; return sname; &#125; public void setSname(String sname) &#123; this.sname = sname; &#125; public String getSex() &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex = sex; &#125; public Student() &#123; super(); &#125; public Student(String sname, String sex) &#123; super(); this.sname = sname; this.sex = sex; &#125; public Grade getGrade() &#123; return grade; &#125; public void setGrade(Grade grade) &#123; this.grade = grade; &#125;&#125; Grade.hbm.xml1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping&gt; &lt;class name=\"com.ben.pojo.Grade\" table=\"grade\"&gt; &lt;id name=\"gid\" column=\"gid\" type=\"java.lang.Integer\"&gt; &lt;generator class=\"native\"&gt;&lt;/generator&gt; &lt;/id&gt; &lt;property name=\"gname\" type=\"java.lang.String\"&gt; &lt;column name=\"gname\"&gt;&lt;/column&gt; &lt;/property&gt; &lt;property name=\"gdesc\" type=\"java.lang.String\"&gt; &lt;column name=\"gdesc\"&gt;&lt;/column&gt; &lt;/property&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; Student.hbm.xml123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping&gt; &lt;class name=\"com.ben.pojo.Student\" table=\"student\"&gt; &lt;id name=\"sid\" column=\"sid\" type=\"java.lang.Integer\"&gt; &lt;generator class=\"native\"&gt;&lt;/generator&gt; &lt;/id&gt; &lt;property name=\"sname\" type=\"java.lang.String\"&gt; &lt;column name=\"sname\"&gt;&lt;/column&gt; &lt;/property&gt; &lt;property name=\"sex\" type=\"java.lang.String\"&gt; &lt;column name=\"sex\"&gt;&lt;/column&gt; &lt;/property&gt; &lt;!-- 配置多对一 --&gt; &lt;many-to-one name=\"grade\" class=\"com.ben.pojo.Grade\" column=\"gid\"&gt;&lt;/many-to-one&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; 双向多对一的关系(基本配置)基本就是上面两个的合体，不过还有其它属性的设置，来消除一些额外资源的使用 inverse属性 节点的inverse属性指定关联关系的控制方向，默认由one方来维护 关联关系中，inverse=”fasle”则为主动方，由主动方负责维护关联关系 在一对多关联中，只能设置one方的inverse为true cascade属性(在数据库设计中也可以设置) 设置cascade属性不为none时，Hibernate会自动持久化所关联的对象 cascade属性的设置会带来一定性能上的变动 属性值 含义和作用 all 对所有操作进行级联操作 save-update 执行保存和更新操作时进行级联操作 delete 执行删除操作时进行级联操作 none 对所有操作不进行级联操作","comments":true,"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://a5566baga.cn/tags/JAVA/"},{"name":"Hibernate","slug":"Hibernate","permalink":"http://a5566baga.cn/tags/Hibernate/"}]},{"title":"Node.js学习express框架","date":"2017-02-16T11:40:49.000Z","path":"2017/02/16/Node-js学习express框架/","text":"Node.js框架学习express.jsexpress.js是什么 Express基于Node.js平台，快速、开放、极简的web开发框架 其他框架：koa... 安装1$ npm install express --save 设置静态服务器12345678var express = require('express');var app = express();// 默认路径app.use(express.static('./public/'));app.listen(3000, function () &#123; console.log(\"listen 3000\");&#125;); 设置特殊路径相应123app.get('/help',function (req,res) &#123; res.send('你请求我干啥！');&#125;); 设置模板引擎设置模板12app.set('views', './views');//views, 放模板文件的目录app.set('view engine', 'ejs');//view engine, 模板引擎 安装模板引擎1$ npm install ejs --save 使用app.js添加123app.get('/help',function (req,res) &#123; res.render('aboutme',&#123;title:'我是模板'&#125;);&#125;); views中创建一个.ejs文件，名称与上文render中第一个参数相同12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;%=title%&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;内容标题为&lt;%=title%&gt;&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; 注意，ejs里面写正常html文件，&lt;%=%&gt;里面是赋值语句 运行，输入地址,即可显示效果1http://localhost:3000/help 遍历数组app.js书写12345678910111213app.get('/help',function (req,res) &#123; var data = &#123; title:'我是模板', name:'张增强', age:'22', lists:['足球', '篮球', '橄榄球', '棒球', '羽毛球'] &#125; res.render('aboutme',data);&#125;); ejs中12345&lt;ul&gt; &lt;%for(var i=0; i&lt;lists.length; i++)&#123;%&gt; &lt;li&gt;&lt;%=lists[i]%&gt;&lt;/li&gt; &lt;%&#125;%&gt;&lt;/ul&gt; table表格搭建123456table:[ &#123;name:'张三',age:'22',fav:'足球,游戏'&#125;, &#123;name:'王五',age:'23',fav:'篮球,音乐,舞蹈'&#125;, &#123;name:'赵四',age:'30',fav:'舞蹈,电影'&#125;, &#123;name:'赵铁柱',age:'26',fav:'唱歌,智障'&#125;] 123456789101112131415161718192021222324&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;爱好&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;% for(var i=0; i&lt;table.length;i++)&#123; %&gt; &lt;tr&gt; &lt;td&gt; &lt;%=table[i]['name']%&gt; &lt;/td&gt; &lt;td&gt; &lt;%=table[i]['age']%&gt; &lt;/td&gt; &lt;td&gt; &lt;%=table[i]['fav']%&gt; &lt;/td&gt; &lt;/tr&gt; &lt;% &#125; %&gt; &lt;/tbody&gt;&lt;/table&gt; 之后可以结合bootstrap进行操作 实时天气预报添加request模块1$ npm install request --save 接入网站，获取数据123456789101112131415var key = 'cb77d4e4750e4d6fb56c91091e401bc4';var city = 'tianjin';var weatherUrl = 'https://free-api.heweather.com/v5/now?key=cb77d4e4750e4d6fb56c91091e401bc4&amp;city='+city;var request = require('request');app.get('/weather',function (req,res) &#123; request(weatherUrl, function (error, response, body) &#123; if (!error &amp;&amp; response.statusCode == 200) &#123; // 解析json字符串 var weather = JSON.parse(body); console.log(weather); res.render('WeatherDemo', weather); &#125; &#125;);&#125;); 设置ejs文件12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;%=HeWeather5[0].basic.city%&gt;今日天气&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;城市-&lt;%=HeWeather5[0].basic.city%&gt;&lt;/h2&gt; 天气:&lt;%=HeWeather5[0].now.cond.txt%&gt; &lt;br&gt; 当前温度:&lt;%=HeWeather5[0].now.tmp%&gt;摄氏度 &lt;/body&gt;&lt;/html&gt;","comments":true,"tags":[{"name":"前台","slug":"前台","permalink":"http://a5566baga.cn/tags/前台/"},{"name":"Node.js","slug":"Node-js","permalink":"http://a5566baga.cn/tags/Node-js/"}]},{"title":"struts2验证和后台国际化","date":"2017-02-16T11:39:59.000Z","path":"2017/02/16/struts2验证和后台国际化/","text":"后台国际化配置.properties文件继承ActionSupport使用1super.getText(); 注意：getText()里面要传递不同的参数，里面的传的参数与国际化文件的key要相同 验证机制写一个方法1public void validate()&#123; &#125; action错误1addActionError(); 注意：要配一个“input”返回result。 后面的execute方法不再执行。 属性错误1addFieldError(); 前台得到错误信息1&lt;s:actionerror/&gt; 后台国际化与验证机制联合使用在addActionError()中填写getText()即可 json表达 添加包 添加类文件 注解 12@ParentPackage(\"json-default\")@Namespace(\"/\") 添加方法 1234public String getJSON()&#123; usersList = usersService.queryUsersByQueryStr(\"\", \"\", 1, 10); return \"success\";&#125; 可以配置除去不要响应的属性值 12345678910111213141516171819202122232425262728293031323334353637383940414243package com.ben.action;import java.util.List;import org.apache.struts2.convention.annotation.Action;import org.apache.struts2.convention.annotation.Namespace;import org.apache.struts2.convention.annotation.ParentPackage;import org.apache.struts2.convention.annotation.Result;import com.ben.pojo.Users;import com.ben.service.UsersService;@ParentPackage(\"json-default\")@Namespace(\"/\")public class JsonAction &#123; private UsersService usersService = new UsersService(); private List&lt;Users&gt; usersList; private String message; @Action(value=\"jsonDemo\",results=&#123;@Result(name=\"success\",type=\"json\", params=&#123;\"excludeProperties\",\"message\"&#125;)&#125;) public String getJSON()&#123; usersList = usersService.queryUsersByQueryStr(\"\", \"\", 1, 10); return \"success\"; &#125; public List&lt;Users&gt; getUsersList() &#123; return usersList; &#125; public void setUsersList(List&lt;Users&gt; usersList) &#123; this.usersList = usersList; &#125; public String getMessage() &#123; return message; &#125; public void setMessage(String message) &#123; this.message = message; &#125;&#125; 利用JQuery的AJAX获取js内容123456789$.ajax(&#123; url:\"http://hq.sinajs.cn/list=s_sz399001\", dataType:\"script\", cache:\"false\", type:\"GET\", success:function(a)&#123; alert(hq_str_s_sz399001); &#125;&#125;); 利用JQuery的AJAX获取JSON数据123$.getJSON(\"http://localhost:8080/ShanShuiManagerStruts/jsonDemo.action\", function(json)&#123; alert(\"JSON Data: \" + json.usersList[0].userName);&#125;);","comments":true,"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://a5566baga.cn/tags/JAVA/"},{"name":"struts2","slug":"struts2","permalink":"http://a5566baga.cn/tags/struts2/"}]},{"title":"数据库的三种对应关系","date":"2017-02-16T11:37:23.000Z","path":"2017/02/16/数据库的三种对应关系/","text":"数据库关系 1对1关系1对多关系多对多关系 举例 1对1关系例如:一个用户只能对应一个身份证 t_card 字段名 类型 主外键 card_id varchar 约束唯一检查 card_date varchar user_id int 主键/外键 t_user 字段名 类型 主外键 id int 主键 u_name varchar u_age int u_role varchar 1对多关系例如:一个用户可以有多张订单。通过订单表的u_id外链接到t_users表中即可。 t_orders 字段名 类型 主外键 id int 主键 product_name varchar product_num int product_price double u_id int t_users 字段名 类型 主外键 id int 主键 u_name varchar u_age int u_role varchar 多对多关系(需要创建中间表)例如:老师和学生的关系 中间表(创建联合主键) 字段名 类型 主外键 t_id int 主键/外键 s_id int 主键/外键 老师表 字段名 类型 主外键 id int 主键 name varchar 学生表 字段名 类型 主外键 id int 主键 name varchar","comments":true,"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://a5566baga.cn/tags/JAVA/"},{"name":"数据库","slug":"数据库","permalink":"http://a5566baga.cn/tags/数据库/"}]},{"title":"Node.js新闻添加的小案例","date":"2017-02-16T11:35:23.000Z","path":"2017/02/16/Node-js新闻添加的小案例/","text":"Node.js新闻添加的小案例 创建文件 save文件夹 admin.html shownews.ejs admin.thml123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style media=\"screen\"&gt; form&#123; width: 800px; margin: 0 auto; border: 1px solid #4c4c4c; padding: 10px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;新闻后台&lt;/h1&gt; &lt;form class=\"\" action=\"/addnews\" method=\"post\"&gt; &lt;label for=\"titile\"&gt;新闻标题&lt;/label&gt; &lt;input type=\"text\" name=\"title\" value=\"\" id=\"title\"&gt; &lt;br&gt; &lt;label for=\"pic\"&gt;新闻图片&lt;/label&gt; &lt;input type=\"text\" name=\"pic\" value=\"\" id=\"pic\"&gt; &lt;br&gt; &lt;label for=\"newssrc\"&gt;新闻来源&lt;/label&gt; &lt;input type=\"text\" name=\"newssrc\" value=\"\" id=\"newssrc\"&gt; &lt;br&gt; &lt;label for=\"newstime\"&gt;新闻时间&lt;/label&gt; &lt;input type=\"text\" name=\"newstime\" value=\"\" id=\"newstime\"&gt; &lt;br&gt; &lt;input type=\"submit\" name=\"\" value=\"提交新闻\"&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; shownews.ejs12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;新闻&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;ul&gt; &lt;% for(var i=0; i&lt;newslist.length; i++)&#123; %&gt; &lt;li&gt; &lt;h1&gt;&lt;%= newslist[i].title %&gt;&lt;/h1&gt; &lt;img src=\"&lt;%= newslist[i].pic %&gt;\" alt=\"\"&gt; &lt;p&gt;&lt;%= newslist[i].newstime %&gt;&lt;/p&gt; &lt;p&gt;&lt;%= newslist[i].newssrc %&gt;&lt;/p&gt; &lt;/li&gt; &lt;% &#125; %&gt; &lt;/ul&gt; &lt;/body&gt;&lt;/html&gt; app.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546var express = require('express');var app = express();var request = require('request');var bodyParser = require('body-parser');var fs = require('fs');//文件的读写app.use(express.static('./public/'));app.set('views','./views');app.set('view engine','ejs');app.use(bodyParser.json());app.use(bodyParser.urlencoded(&#123;extended:true&#125;));//添加新闻app.post('/addnews', function (req,res) &#123; console.log(req.body); fs.readFile('./save/news.json', function (err,data) &#123; var newslist; if(data.toString() === '')&#123; newslist = []; &#125;else&#123; newslist = JSON.parse(data); &#125; var news = &#123;&#125;; news.title = req.body.title; news.pic = req.body.pic; news.newssrc = req.body.newssrc; news.newstime = req.body.newstime; newslist.push(news); var str = JSON.stringify(newslist); fs.writeFile('./save/news.json',str,'UTF-8'); res.send('添加成功'); &#125;);&#125;);app.get(\"/news\", function (req, res) &#123; fs.readFile('./save/news.json', function (err,data) &#123; var list = JSON.parse(data); res.render('shownews',&#123;newslist:list&#125;); &#125;);&#125;);var server = app.listen(3000,function()&#123; console.log(\"server 3000 running!\");&#125;); 注意:相关的依赖包要导入- &quot;body-parser&quot;: &quot;^1.16.1&quot;, - &quot;ejs&quot;: &quot;^2.5.5&quot;, - &quot;express&quot;: &quot;^4.14.1&quot;, - &quot;request&quot;: &quot;^2.79.0&quot;","comments":true,"tags":[{"name":"前台","slug":"前台","permalink":"http://a5566baga.cn/tags/前台/"},{"name":"Node.js","slug":"Node-js","permalink":"http://a5566baga.cn/tags/Node-js/"}]},{"title":"Node.js中间件使用","date":"2017-02-16T11:33:48.000Z","path":"2017/02/16/Node-js中间件使用/","text":"Express进阶 了解请求使用body-parse处理请求了解express.js中间件的概念根据请求设置不同的响应使用路由分配模块 Request请求Get请求——向服务器申请内容，请求体随URL发送，长度受限制，不加密123app.get('/search', function (req, res) &#123; res.send('你搜索了');&#125;); Post请求——向服务器提交内容，请求体单独发送，长度不限，安全123app.post('/search', function (req, res) &#123; res.send('你搜索了');&#125;); 在页面from表单中method设为GET/POST，action填对应的内容 安装中间件安装1$ npm install body-parser --save 添加依赖12345var bodyParser = require('body-parser');//解析JSONapp.use(bodyParser.json());//处理页面传来的值app.use(bodyParser.urlencoded(&#123;extended:true&#125;)); 与页面结合add.ejs123456789101112&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;用户&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;姓名&lt;%=name%&gt;&lt;/h1&gt; &lt;h1&gt;年龄&lt;%=age%&gt;&lt;/h1&gt; &lt;h1&gt;爱好&lt;%=fav%&gt;&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; app.js12345678app.post('/adduser', function (req, res) &#123; console.log(req.body); var user = &#123;&#125;; user.name = req.body.name; user.age = req.body.age; user.fav = req.body.fav; res.render('add',user);&#125;); 表单页面自己添加12345678910&lt;form class=\"\" action=\"/adduser\" method=\"post\"&gt; &lt;label for=\"name\"&gt;姓名&lt;/label&gt; &lt;input id=\"name\" type=\"text\" name=\"name\" value=\"\"&gt; &lt;label for=\"age\"&gt;年龄&lt;/label&gt; &lt;input id=\"age\" type=\"text\" name=\"age\" value=\"\"&gt; &lt;label for=\"fav\"&gt;爱好&lt;/label&gt; &lt;input id=\"fav\" type=\"text\" name=\"fav\" value=\"\"&gt; &lt;input type=\"submit\" name=\"button\" value=\"添加\"&gt;&lt;/button&gt;&lt;/form&gt; 写入文件添加依赖1var fs = require('fs');//文件的读写 写入文件12var str = JSON.stringify(user);fs.writeFile('./save/user.json',str,'UTF-8'); 注意：要创建文件夹 持续写入内容1234var str = JSON.stringify(user);fs.appendFile('./save/user.json', str, 'UTF-8', function () &#123; console.log('追加内容完成');&#125;); 创建数组，数组内为JSON格式123456789101112131415161718192021app.post('/adduser', function (req, res) &#123; console.log(req.body); fs.readFile('./save/user.json', function (err,data) &#123; var userlist; if(data.toString() === '')&#123; userlist = []; &#125;else&#123; userlist = JSON.parse(data); &#125; var user = &#123;&#125;; user.name = req.body.name; user.age = req.body.age; user.fav = req.body.fav; //将新用户推进数组保存 userlist.push(user); //持续写入对象 var str = JSON.stringify(userlist); fs.writeFile('./save/user.json',str,'UTF-8'); res.render('add',user); &#125;);&#125;); 自定义中间件1234567891011121314151617181920212223242526272829//自定义的中间件function addnews(req,res,next) &#123; fs.readFile('./save/news.json', function (err,data) &#123; var newslist; if(data.toString() === '')&#123; newslist = []; &#125;else&#123; newslist = JSON.parse(data); &#125; var news = &#123;&#125;; news.title = req.body.title; news.pic = req.body.pic; news.newssrc = req.body.newssrc; news.newstime = req.body.newstime; newslist.push(news); var str = JSON.stringify(newslist); fs.writeFile('./save/news.json',str,'UTF-8'); // res.send('添加成功'); &#125;); next();&#125;//添加新闻app.post('/addnews', addnews, function (req,res) &#123; console.log(req.body); res.send('添加成功!!!');&#125;); 自定义不同路由处理自定义路由处理123456789101112//这个路由文件用于处理所有来自后台端的请求var express = require('express');var router = express.Router();// 做其它路由处理router.get('', function (req, res, next) &#123;&#125;);router.post('', function (req,res, next) &#123;&#125;);module.exports router; app.js添加12app.use('/admin', admin);//表示所有/admin请求都走admin.js路由请求 express自动构建工程 安装 1$ npm install express-generator -g 创建一个ejs工程 1$ express -e 执行安装 1$ npm install 运行 1$ npm start","comments":true,"tags":[{"name":"前台","slug":"前台","permalink":"http://a5566baga.cn/tags/前台/"},{"name":"Node.js","slug":"Node-js","permalink":"http://a5566baga.cn/tags/Node-js/"}]},{"title":"Node.js创建一个显示天气的服务","date":"2017-02-15T12:15:17.000Z","path":"2017/02/15/Node-js创建一个显示天气的服务/","text":"使用Node.js与和风天气创建一个天气服务 注册和风天气账号Node.js安装Express安装ejs框架页面的搭建解析JSON数据 注册和风天气账号官网API文档天气图片对应 Node.js安装Express在文件夹下初始化，创建工程1$ npm init 安装ejs安装express包1$ npm install express --save 配置(创建app.js)12345678var express = require('express');var app = express();//配置静态目录app.use(express.static('public'));///设置监听端口var server = app.listen(3000,function()&#123; console.log(\"server 3000 running!\");&#125;); 安装ejs模板1$ npm install ejs --save 配置ejs信息1234//配置放模板文件的目录app.set('views','./views');//模板引擎app.set('view engine','ejs'); 页面的搭建在上文配置的”views”文件夹下创建一个.ejs文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;html&gt; &lt;html lang=\"zh-CN\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;title&gt;&lt;%=HeWeather5[0].basic.city%&gt;&lt;/title&gt; &lt;link href=\"css/bootstrap.min.css\" rel=\"stylesheet\"&gt; &lt;!--[if lt IE 9]&gt; &lt;script src=\"https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js\"&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;style type=\"text/css\"&gt; .weatherDiv&#123; text-align: center; /*border: 1px solid black;*/ &#125; &lt;/style&gt; &lt;body&gt; &lt;h1&gt;&lt;%=HeWeather5[0].basic.city%&gt;当前天气&lt;/h1&gt; &lt;div class=\"container-fluid\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-xs-6 col-md-4 weatherDiv\"&gt; &lt;p&gt;今天(&lt;%=HeWeather5[0].daily_forecast[0].date%&gt;)&lt;/p&gt; &lt;img class=\"img-rounded\" src=\"http://files.heweather.com/cond_icon/&lt;%=HeWeather5[0].daily_forecast[0].cond.code_d%&gt;.png\" alt=\"http://files.heweather.com/cond_icon/&lt;%=HeWeather5[0].daily_forecast[0].cond.code_d%&gt;.png\"/&gt; &lt;p&gt;&lt;%=HeWeather5[0].daily_forecast[0].tmp.min%&gt;~&lt;%=HeWeather5[0].daily_forecast[0].tmp.max%&gt;摄氏度&lt;/p&gt; &lt;p&gt;&lt;%=HeWeather5[0].daily_forecast[0].cond.text_d%&gt;&lt;/p&gt; &lt;p&gt;&lt;%=HeWeather5[0].daily_forecast[0].wind.dir%&gt;&lt;%=HeWeather5[0].daily_forecast[0].wind.sc%&gt;级&lt;/p&gt; &lt;/div&gt; &lt;div class=\"col-xs-6 col-md-4 weatherDiv\"&gt; &lt;p&gt;明天(&lt;%=HeWeather5[0].daily_forecast[0].date%&gt;)&lt;/p&gt; &lt;img src=\"http://files.heweather.com/cond_icon/&lt;%=HeWeather5[0].daily_forecast[1].cond.code_d%&gt;.png\" alt=\"http://files.heweather.com/cond_icon/&lt;%=HeWeather5[0].daily_forecast[1].cond.code_d%&gt;.png\"/&gt; &lt;p&gt;&lt;%=HeWeather5[0].daily_forecast[0].tmp.min%&gt;~&lt;%=HeWeather5[0].daily_forecast[1].tmp.max%&gt;摄氏度&lt;/p&gt; &lt;p&gt;&lt;%=HeWeather5[0].daily_forecast[0].cond.text_d%&gt;&lt;/p&gt; &lt;p&gt;&lt;%=HeWeather5[0].daily_forecast[0].wind.dir%&gt;&lt;%=HeWeather5[0].daily_forecast[0].wind.sc%&gt;级&lt;/p&gt; &lt;/div&gt; &lt;div class=\"col-xs-6 col-md-4 weatherDiv\"&gt; &lt;p&gt;后天(&lt;%=HeWeather5[0].daily_forecast[0].date%&gt;)&lt;/p&gt; &lt;img src=\"http://files.heweather.com/cond_icon/&lt;%=HeWeather5[0].daily_forecast[2].cond.code_d%&gt;.png\" alt=\"http://files.heweather.com/cond_icon/&lt;%=HeWeather5[0].daily_forecast[2].cond.code_d%&gt;.png\"/&gt; &lt;p&gt;&lt;%=HeWeather5[0].daily_forecast[0].tmp.min%&gt;~&lt;%=HeWeather5[0].daily_forecast[2].tmp.max%&gt;摄氏度摄氏度&lt;/p&gt; &lt;p&gt;&lt;%=HeWeather5[0].daily_forecast[0].cond.text_d%&gt;&lt;/p&gt; &lt;p&gt;&lt;%=HeWeather5[0].daily_forecast[0].wind.dir%&gt;&lt;%=HeWeather5[0].daily_forecast[0].wind.sc%&gt;级&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"&gt;&lt;/script&gt; &lt;script src=\"js/bootstrap.min.js\"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 解析JSON数据安装request包1$ npm install request --save 添加使用代码，解析和风传来的参数 拼接字符串：https://free-api.heweather.com/v5/forecast?key=cb77d4e4750e4d6fb56c91091e401bc4&amp;city=jinan123456app.get(\"/weather\", function(req,res)&#123; request(forecastUrl,function(error,response,body)&#123; var weather = JSON.parse(body); res.render('weather', weather); &#125;);&#125;); app.js12345678910111213141516171819202122var express = require('express');var app = express();var request = require('request');var key = \"cb77d4e4750e4d6fb56c91091e401bc4\";var weatherUrl = \"https://free-api.heweather.com/v5/\";var city = \"jinan\";var forecastUrl = weatherUrl+\"forecast?key=\"+key+\"&amp;city=\"+city;app.use(express.static('./public'));app.set('views','./views');app.set('view engine','ejs');app.get(\"/weather\", function(req,res)&#123; request(forecastUrl,function(error,response,body)&#123; var weather = JSON.parse(body); res.render('weather', weather); &#125;);&#125;);var server = app.listen(3000,function()&#123; console.log(\"server 3000 running!\");&#125;); 运行","comments":true,"tags":[{"name":"前台","slug":"前台","permalink":"http://a5566baga.cn/tags/前台/"},{"name":"Node.js","slug":"Node-js","permalink":"http://a5566baga.cn/tags/Node-js/"}]},{"title":"Node.js搭建本地静态服务器","date":"2017-02-14T11:11:05.000Z","path":"2017/02/14/Node-js搭建本地静态服务器/","text":"Node.js搭建本地静态服务器了解网络HTTP(超文本传输协议)主要内容请求请求头 请求体 响应响应头 响应体 连接(三次握手)断开(四次挥手) 基于Node.js静态服务器url模块 url是node.js的内建模块 url模块中最重要的方法是parse()方法，用于将url字符串解析成为对象 基础语法:url.parse(url:string); 举例_url12345678910var http = require('http');var url = require('url');//url为node.js中的内置模块，主要用于解析或者封装url地址var server = http.createServer(function (req, res) &#123; console.log(url.parse('http://localhost:4000/img.jpg'));&#125;);server.listen(4000, function () &#123; console.log('server is running at 4000 666');&#125;); 123456789101112131415$ node index.jsserver is running at 4000 666Url &#123; protocol: 'http:', slashes: true, auth: null, host: 'localhost:4000', port: '4000', hostname: 'localhost', hash: null, search: null, query: null, pathname: '/img.jpg', path: '/img.jpg', href: 'http://localhost:4000/img.jpg' &#125; 举例_fs fs模块:fs-&gt;files system缩写 fs.readFile(); 读取文件内容 fs.state(); 读取文件状态 index.js12345678var fs = require('fs');fs.readFile('./test.txt', function(error,data) &#123; if(error)&#123; console.log(error); &#125;else &#123; console.log(data.toString()); &#125;&#125;); 输出123$ node index.jsserver is running at 4000 666这是一个txt文本文件 返回对应的页面12345678910111213var server = http.createServer(function (req, res) &#123; // 得到用户访问了哪个地址 var path = '.'+url.parse(req.url).pathname; // 发送用户访问了哪个网址 fs.readFile(path, function(err, data) &#123; if(err)&#123; console.log(err); &#125;else&#123; var html = data.toString(); res.end(html); &#125; &#125;);&#125;); url.parse(req.url).pathname 会解析到对应的路径 js.stat文件状态1234567fs.stat('public/test.txt', function (err,stat) &#123; if(err)&#123; console.log(err); &#125;else&#123; console.log(stat); &#125;&#125;); 1234567891011121314151617$ node index.jsserver is running at 4000 厉害了&#123; dev: 535335, mode: 33206, nlink: 1, uid: 0, gid: 0, rdev: 0, blksize: undefined, ino: 1407374883560421, size: 29, blocks: undefined, atime: 2017-02-14T01:50:56.535Z, mtime: 2017-02-14T02:20:15.197Z, ctime: 2017-02-14T02:51:00.394Z, birthtime: 2017-02-14T01:50:56.535Z &#125;这是一个txt文本文件 注意：fs.stat会先于fs.readFile执行。显示了异步执行。 综合应用：12345678910111213141516171819var server = http.createServer(function (req, res) &#123; // 得到用户访问了哪个地址 var path = './public'+url.parse(req.url).pathname; fs.stat(path, function (err, stat) &#123; if(!stat)&#123; // 如果访问的文件不存在，则进入分支 fs.readFile(\"./public/404.html\", function(err,data) &#123; var html = data.toString(); res.end(html); &#125;); &#125;else&#123; // 发送用户访问了哪个网址 fs.readFile(path, function(err, data) &#123; var html = data.toString(); res.end(html); &#125;); &#125; &#125;);&#125;); MIME信息添加之后12345var path = require('path');//处理一些文件目录、路径一类的信息var MIME = &#123; html:'text/html', css:'text/css'&#125; 发送内容的代码1234567891011121314151617181920212223242526272829var server = http.createServer(function (req, res) &#123; // 得到用户访问了哪个地址 var pathname = './public'+url.parse(req.url).pathname; fs.stat(pathname, function (err, stat) &#123; if(!stat)&#123; // 如果访问的文件不存在，则进入分支 fs.readFile(\"./public/404.html\", function(err,data) &#123; if(err)&#123; console.log(err); &#125;else&#123; var html = data.toString(); res.end(html); &#125; &#125;); &#125;else&#123; // 发送用户访问了哪个网址 fs.readFile(pathname, function(err, data) &#123; if(err)&#123; console.log(err); &#125;else&#123; var html = data.toString(); var extname = (path.extname(pathname)).split('.')[1]; res.writeHead(200,&#123;\"Content-Type\":MIME[extname]&#125;); res.end(html); &#125; &#125;); &#125; &#125;);&#125;); 修改，可以传图片12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152var MIME = &#123; \"\":\"text/html\", html:'text/html', css:'text/css', jpg:\"image/jpeg\", png:\"image/png\", ico:\"image/x-icon\"&#125;var server = http.createServer(function (req, res) &#123; // 得到用户访问了哪个地址 var pathname = './public'+url.parse(req.url).pathname; fs.stat(pathname, function (err, stat) &#123; if(!stat)&#123; // 如果访问的文件不存在，则进入分支 fs.readFile(\"./public/404.html\", function(err,data) &#123; if(err)&#123; console.log(\"stat readFile\" + err); &#125;else&#123; var extname = (path.extname(pathname)).split('.')[1]; res.writeHead(200,&#123;\"Content-Type\":MIME[extname]&#125;); res.write(data); res.end(); &#125; &#125;); &#125;else&#123; // 发送用户访问了哪个网址 fs.readFile(pathname, function(err, data) &#123; //访问根目录，就进入index.html if(err)&#123; fs.readFile(\"./public/index.html\", function(err,data) &#123; if(err)&#123; console.log(\"stat readFile\" + err); &#125;else&#123; //1.不能转字符串 //2.不用end转 var extname = (path.extname(pathname)).split('.')[1]; res.writeHead(200,&#123;\"Content-Type\":MIME[extname]&#125;); res.write(data); res.end(); &#125; &#125;); &#125;else&#123; var extname = (path.extname(pathname)).split('.')[1]; res.writeHead(200,&#123;\"Content-Type\":MIME[extname]&#125;); res.write(data); res.end(); &#125; &#125;); &#125; &#125;);&#125;); 页面修改12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;网页&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"./css/style.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;这是HTML网页&lt;/h1&gt; &lt;h2&gt;OK,没毛病&lt;/h2&gt; &lt;img src=\"./img/01.png\" alt=\"\"&gt; &lt;/body&gt;&lt;/html&gt; 运行即可查看网页看到效果","comments":true,"tags":[{"name":"前台","slug":"前台","permalink":"http://a5566baga.cn/tags/前台/"},{"name":"Node.js","slug":"Node-js","permalink":"http://a5566baga.cn/tags/Node-js/"}]},{"title":"struts2注解类型转换国际化","date":"2017-02-14T11:10:06.000Z","path":"2017/02/14/struts2注解类型转换国际化/","text":"注解使用 导包 @ParentPackage @Namespace @Action()默认action名称 默认动态配置没打开,手动配置在struts.xml中添加 1&lt;constant name=\"struts.enable.DynamicMethodInvocation\" value=\"true\"&gt;&lt;/constant&gt; 在struts2-core-2.3.31.jar—&gt;org.apache.struts2—&gt;default.properties找【struts.enable.DynamicMethodInvocation = false】然后进行相应的修改 修改xml和java文件 Action的java文件中配置的注解不要用一个value，否则后面会覆盖 在每个方法前面写@Action注解 对应jsp进行action的修改代码举例java代码123@ParentPackage(\"struts-default\")@Namespace(\"/users\")@Results(&#123;@Result(name=\"query\",type=\"chain\",params=&#123;\"actionName\",\"query\"&#125;)&#125;) 类型转换 应用场景，如：日期的自定义 实现TypeConverter 配置 .properties文件，命名要规范(类名-conversion.properties) 提交录入是执行/显示数据时执行 实际应用 继承StrutsTypeConverter 在重写的两个方法中分别对应表单提交和查询表示 提交表单的方法中可以针对提交的内容进行封装 123456789@Overridepublic Object convertFromString(Map context, String[] params, Class toClass) &#123; return null;&#125;//从Object转为String——显示数据的时候执行此方法@Overridepublic String convertToString(Map context, Object obj) &#123; return null;&#125; 全局配置xwork-conversion.properties里面可以配置全局的类型转换。放在包的根目录下 1java.sql.Date=com.ben.struts.converter.DateConverter 一般的放在包路径下 国际化 struts.xml中配置标签 配合标签使用 设置.properties,注意前面的_zh_CN等标志","comments":true,"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://a5566baga.cn/tags/JAVA/"},{"name":"struts2","slug":"struts2","permalink":"http://a5566baga.cn/tags/struts2/"}]},{"title":"struts2拦截器配置","date":"2017-02-13T12:03:59.000Z","path":"2017/02/13/struts2拦截器配置/","text":"拦截器基本配置struts.xml中name：自定义拦截器的名称 class：拦截器所在的类 12345&lt;interceptor name=\"myInterceptor\" class=\"com.ben.interceptor.MyInterceptor\"&gt;&lt;/interceptor&gt;&lt;action name=\"\" class=\"\"&gt; &lt;interceptor-ref name=\"defaultStack\"&gt;&lt;/interceptor-ref&gt; &lt;interceptor-ref name=\"myInterceptor\"&gt;&lt;/interceptor-ref&gt;&lt;/action&gt; MyInterceptor.java实现Interceptor接口，重写方法 123456789101112131415161718package com.ben.interceptor;import com.opensymphony.xwork2.ActionInvocation;import com.opensymphony.xwork2.interceptor.Interceptor;public class MyInterceptor implements Interceptor&#123; @Override public String intercept(ActionInvocation arg0) throws Exception &#123; // TODO Auto-generated method stub return null; &#125; @Override public void destroy() &#123; // TODO Auto-generated method stub &#125; @Override public void init() &#123; // TODO Auto-generated method stub &#125;&#125;","comments":true,"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://a5566baga.cn/tags/JAVA/"},{"name":"struts2","slug":"struts2","permalink":"http://a5566baga.cn/tags/struts2/"}]},{"title":"Node.js安装与nmp的基本使用","date":"2017-02-13T12:00:02.000Z","path":"2017/02/13/Node-js安装与nmp的基本使用/","text":"Node.js安装与nmp的基本使用JavaScript引擎 Browser,Headless Browser,or Runtime JavaScript Engine Mozilla Spidermonkey Chrome V8 Safari JavaScriptCore IE and Edge Chakra PhantomJS JavaScriptCore HTMLUnit Rhino TrifileJS V8 Node.js V8 Io.js V8 chrome的V8引擎 初识Node.jsnpm(Node Package Manager)特点 Node.js内置的包管理工具 收录大量的开源工具 社群稳定 生态发达 npm的使用方法 安装node.js 后系统会自动安装npm npm -v 查询版本 npm init 新建工程项目 npm install 安装包 npm update更新模块 常用命令列表… 初始化 init命令12345678910$ npm initname: (0213)名称version: (1.0.0)版本号description:描述entry point: (index.js)入口点test command:测试命令git repository:git的仓库keywords:关键词author: 作者license: (ISC)开源证书 安装库 install命令1$ npm install jquery --save 删除 uninstall1$ nmp uninstall jquery --save 安装低版本 @接版本号1$ npm install jquery@2 --save 安装的另一种写法 –save位置不同1$ npm install --save bootstrap 在删除node_modules文件夹后，只要json文件在，直接执行install命令1$ npm install 更新1$ npm update jquery 更换源，换成淘宝的NPM镜像官网1$ npm install -g cnpm --registry=https://registry.npm.taobao.org Node.js使用 Node.js需要借助命令行界面运行 REPL程序 启动外部代码文件 node命令直接启动12$ node&gt; 输入内容 模块怎么用？ Node.js中也有全局对象的概念 exports对象 require对象 基本用法cal.js123456exports.add = function(x, y) &#123; return x+y;&#125;exports.minus = function (x, y) &#123; return x-y;&#125; index.js12var cal = require('./cal.js');console.log(cal.add(5,6)); 运行12$ node index.js11 module.exports在模块中只能写一次，后面的会覆盖。什么对象都能导出hello.js12345678910111213//定义原型函数function Hello() &#123; this.name = 'hello func'; this.version = '1.0';&#125;//添加方法Hello.prototype = &#123; say:function() &#123; console.log(this.name); &#125;&#125;//module抛出,这个只能写一次module.exports = Hello; index.js123456//加载var hello = require('./cal.js');//创建var a = new hello();//调用a.say(); 运行12$ node index.jshello func 应用场景，如配置文件123456//只抛一次，全都可以用var config = &#123; username:\"root\", password:\"root\"&#125;module.exports = config; 搭建服务器(注意:这种方式不是每个浏览器都能正常查看)index.js123456789var http = require('http');var server = http.createServer(function (request, response) &#123; response.writeHead(200,&#123;\"Content-type\":\"text/html;charset=UTF-8\"&#125;); response.end('&lt;h1&gt;Hello Server&lt;/h1&gt;');&#125;);server.listen(4000, function () &#123; console.log('server is running at 4000');&#125;); 命令行12$ node index.jsserver is running at 4000","comments":true,"tags":[{"name":"前台","slug":"前台","permalink":"http://a5566baga.cn/tags/前台/"},{"name":"Node.js","slug":"Node-js","permalink":"http://a5566baga.cn/tags/Node-js/"}]},{"title":"iOS毛玻璃效果","date":"2017-02-11T12:11:07.000Z","path":"2017/02/11/iOS毛玻璃效果/","text":"毛玻璃效果 毛玻璃效果是在iOS8.0之后添加的需要创建的对象有 UIImageView 原图片视图UIBlurEffect 毛玻璃设置UIVisualEffectView 毛玻璃视图 代码1234567891011UIImageView * blueImageView = [[UIImageView alloc] initWithFrame:self.view.bounds];根据需求添加图片[self.view addSubview: blueImageView];//创建毛玻璃效果UIBlurEffect * blur = [UIBlurEffect effectWithStyle:UIBlurEffectStyleExtraLight];//创建毛玻璃视图UIVisualEffectView * visualView = [[UIVisualEffectView alloc] initWithEffect:blur];visualView.frame = blueImageView.bounds;//添加到imageView上[blueImageView addSubview:visualView]; 注意，这个是要添加到view中哦","comments":true,"tags":[{"name":"iOS","slug":"iOS","permalink":"http://a5566baga.cn/tags/iOS/"}]},{"title":"OC语法-01","date":"2017-02-09T13:13:13.000Z","path":"2017/02/09/OC语法-01/","text":"基本类的使用 本章要知道的内容有—— 创建一个类 声明方法和类方法 声明属性 成员变量 创建一个对象 NSString的使用 NSNumber的使用 创建一个类 语言选择Objective-C，继承的父类是 NSObject。这样，一个类就创建好了。 声明方法和类方法方法 方法的声明：在.h文件中声明，一般是 - (返回值类型)方法名（驼峰标识法）{} 1234&gt; (void)setName:(NSString *)name;&gt; 1234&gt; (NSString *)name;&gt; 方法的实现：在.m文件中书写，快捷的实现方式是 - 方法名 就会提示出来，自己选择就会 12345678&gt; (void)setName:(NSString *)name&#123;&gt; _name = name;&gt; &#125;&gt; 12345678910111213141516&gt; (NSString *)name&#123;&gt; if (_name != nil) &#123;&gt; return _name;&gt; &#125;else&#123;&gt; return nil;&gt; &#125;&gt; &#125;&gt; 构造方法：一般init开头，后面会很常见 1234&gt; (instancetype)init;&gt; 123456789101112131415161718&gt; (instancetype)init&gt; &#123;&gt; self = [super init];&gt; if (self) &#123;&gt; _name = @\"erhuo\";&gt; &#125;&gt; return self;&gt; &#125;&gt; 类方法 类方法就是通过 + 开头的方法，不需要创建对象就能够调用1234&gt; + (void)setNewName:(NSString *)newName;&gt; 12345678&gt; + (void)setNewName:(NSString *)newName&#123;&gt; NSLog(@\"%@\", newName);&gt; &#125;&gt; 1234&gt; [Person setNewName:@\"xinXiaoQiang\"];&gt; 成员变量、属性 成员变量：有三个属性修饰符，@public @private @protected1234567891011121314151617181920212223242526272829303132&gt; &#123;&gt; //声明成员变量&gt; // @public 公有修饰符&gt; // @private 私有变量修饰符&gt; // @protected 保护的修饰符&gt; @public&gt; NSString * _name;&gt; @private&gt; NSString * _address;&gt; @protected&gt; NSInteger age;&gt; &#125;&gt; 属性：修饰有 nonatomic atomic assign retain copy weak readwrite readonly strong一般常用的是：nonatomic assign copy strong1234&gt; @property NSString * nickName;&gt; 创建一个对象 怎么创建一个对象1、引入头文件 用 #import “Person.h” 防止循环导入 用 #include “Person.h”会引起循环导入 2、创建对象1234&gt; Person * person1 = [[Person alloc] init];&gt; 3、使用对象1234&gt; [person1 setName:@\"xiangqiang\"];&gt; 最终代码样式Person.h1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#import &lt;Foundation/Foundation.h&gt;//这是.h文件，一般在这里写 属性 方法的声明@interface Person : NSObject&#123; //声明成员变量// @public 公有修饰符// @private 私有变量修饰符// @protected 保护的修饰符 @public NSString * _name; @private NSString * _address; @protected NSInteger age;&#125;//nonatomic atomic assign retain copy weak readwrite readonly strong setter=&lt;#method#&gt;//一般我们使用的是 nonatomic assign copy strong@property NSString * nickName;//一般面向对象的编程语言，都需要setter getter方法//OC中setter方法是set+成员变量名//getter方法是直接成员变量名- (void)setName:(NSString *)name;- (NSString *)name;//OC要写初始化方法，用init开头- (instancetype)init;//类方法+ (void)setNewName:(NSString *)newName;@end Person.m1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#import \"Person.h\"@implementation Person//[super init]是啥意思？？？ 因为每一个类都是有一个父类，这个父类我们都称他为 爸爸- (instancetype)init&#123; self = [super init]; if (self) &#123; _name = @\"erhuo\"; &#125; return self;&#125;- (void)setName:(NSString *)name&#123; _name = name;&#125;- (NSString *)name&#123; if (_name != nil) &#123; return _name; &#125;else&#123; return nil; &#125;&#125;+ (void)setNewName:(NSString *)newName&#123; NSLog(@\"%@\", newName);&#125;@end main.m123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#import &lt;Foundation/Foundation.h&gt;//include 在C中比较常见的引入头文件的方式，但是在OC中，这样导入可能引起重复引用//#include \"Person.h\"//一般使用 import#import \"Person.h\"int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; //创建一个类// Person * person1 = [[Person alloc] init];// person1-&gt;_address 划横线的// person1-&gt;age 划横线的// person1-&gt;_name 可以访问的// NSLog(@\"%@\", person1-&gt;_name);// [person1 setName:@\"xiangqiang\"];// NSString * res = [person1 name];// NSLog(@\"%@\", res);// [Person setNewName:@\"xinXiaoQiang\"]; Person * person2 = [[Person alloc] init]; [person2 setNickName:@\"qiangGe\"];// NSLog(@\"%@\", person2.nickName); NSLog(@\"%@\", [person2 nickName]); &#125; return 0;&#125; NSString的使用不可变字符串 基本创建方式12345678910111213141516171819202122232425262728293031323334&gt; void generalUse()&#123;&gt; //NSStrig 是什么呢，是对字符串封装的一个类&gt; //1.最简单的创建方式&gt; NSString * str1 = @\"str1\";&gt; //2.通过构造方法创建&gt; // NSString * str2 = [[NSString alloc] initWithString:@\"str3\"];&gt; //3.通过构造方法创建 格式化创建&gt; NSString * str3 = [NSString stringWithFormat:@\"%@，22\", @\"sss\"];&gt; //copy 浅拷贝，拷贝的只是地址&gt; NSString * str4 = [str1 copy];&gt; //mutableCopy 深拷贝，拷贝的是整个对象，开辟一个新的内存，存入“str1”这个字符串对象&gt; NSString * str5 = [str1 mutableCopy];&gt; NSLog(@\"str1:%@\\nstr2:\\nstr3:%@\\nstr4:%@\\nstr5:%@\", str1, str3, str4, str5);&gt; NSLog(@\"================\");&gt; NSLog(@\"str1:%p\\nstr4:%p\\nstr5:%p\",str1, str4, str5);&gt; &#125;&gt; NSString的常用方法123456789101112131415161718192021222324252627282930313233343536373839404142434445&gt; void testMethod()&#123;&gt; //1、字符串拼接&gt; NSString * str = @\"i am \";&gt; NSLog(@\"%@\",[str stringByAppendingString:@\"good boy\"]);&gt; str = [str stringByAppendingString:@\"bad boy\"];&gt; NSLog(@\"%@\", str);&gt; NSLog(@\"================\");&gt; //2、字符串格式化拼接&gt; NSString * str2 = @\"xiao\";&gt; NSInteger age = 2;&gt; double height = 80.001;&gt; str2 = [str2 stringByAppendingFormat:@\"%@-%ld-%.3lf\", @\" bu dian\", age, height];&gt; NSLog(@\"%@\", str2);&gt; //3、字符串分割&gt; NSString * str3 = @\"abcdefghigkflmn\";&gt; //通过单个字符分割生成数组&gt; NSLog(@\"%@\",[str3 componentsSeparatedByString:@\"f\"]);&gt; //通过字符集合，字符内都有的，一律分割&gt; NSLog(@\"%@\",[str3 componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@\"fgh\"]]);&gt; &#125;&gt; 可变字符串 创建可变字符串：12345678910111213141516171819202122&gt; //NSMutableString 可变字符串&gt; //1.创建字符串&gt; NSMutableString * str = [[NSMutableString alloc] initWithString:@\"i am\"];&gt; [str appendString:@\" ss\"];&gt; NSLog(@\"%@\", str);&gt; //2.格式化创建字符串&gt; NSMutableString * str2 = [[NSMutableString alloc] initWithFormat:@\"%@ sss\", @\"无所谓\"];&gt; NSLog(@\"%@\", str2);&gt; //3.注意,这样创建的字符串默认是不可变的字符串&gt; NSMutableString * str3 = @\"不可取\";&gt; 可变字符串的方法使用：1234567891011121314151617181920212223242526272829303132333435363738394041&gt; //基本常用方法，跟不可变的用法类似,但有一些不同方法&gt; NSMutableString * str = [[NSMutableString alloc] initWithString:@\"i am a good boy\"];&gt; //插入&gt; [str insertString:@\" not\" atIndex:4];&gt; NSLog(@\"%@\", str);&gt; //更新，替换&gt; [str replaceCharactersInRange:NSMakeRange(0, 2) withString:@\"no\"];&gt; NSLog(@\"%@\", str);&gt; //删除&gt; [str deleteCharactersInRange:NSMakeRange(0, 4)];&gt; NSLog(@\"%@\", str);&gt; //根据下标取出字符&gt; NSLog(@\"%c\",[str characterAtIndex:2]);&gt; //从第几个下标开始取值&gt; NSLog(@\"%@\",[str substringFromIndex:3]);&gt; //从下标0开始，取到哪个地方&gt; NSLog(@\"%@\",[str substringToIndex:5]);&gt; //从字符串中取出范围的&gt; NSLog(@\"%@\",[str substringWithRange:NSMakeRange(0, 6)]);&gt; NSNumber的使用 是对数字的封装的类，因为在集合中无法使用基本数据类型，所以需要包装12345678910111213141516171819202122232425262728&gt; //整型&gt; NSNumber * num1 = @(2);&gt; NSNumber * num2 = [NSNumber numberWithInteger:22];&gt; //浮点型&gt; NSNumber * floatNum = [NSNumber numberWithFloat:2.1];&gt; NSNumber * doubleNum = [NSNumber numberWithDouble:2.222];&gt; //布尔型&gt; NSNumber * boolTrue1 = @(YES);&gt; NSNumber * boolTrue2 = [NSNumber numberWithBool:YES];&gt; NSNumber * boolFalse1 = @(NO);&gt; NSNumber * boolFalse2 = [NSNumber numberWithBool:NO];&gt; //字符型&gt; NSNumber * char1 = [NSNumber numberWithChar:'a'];&gt;","comments":true,"tags":[{"name":"iOS","slug":"iOS","permalink":"http://a5566baga.cn/tags/iOS/"}]},{"title":"初识OC","date":"2017-02-09T13:08:45.000Z","path":"2017/02/09/初识OC/","text":"开发须知 本章节你需要知道的内容—— 啥是Objective-C 我咋进行编程 啥是Objective-C？说的好，啥是Objective-C，或是人们口中的OC呢？它的定义是这个 Objective-C，通常写作ObjC或OC和较少用的Objective C或Obj-C，是扩充C的面向对象编程语言。它主要使用于Mac OS X和GNUstep这两个使用OpenStep标准的系统，而在NeXTSTEP和OpenStep中它更是基本语言。GCC与Clang含Objective-C的编译器，Objective-C可以在GCC以及Clang运作的系统上编译。 那么，让我总结一下就是：能够编写iOS应用的面向对象的语言。。。特征 面向对象：封装、继承（单继承）、多态 C语言的超集 开发iOS平台应用语言之一 我咋进行编程？需要三大宝物： Mac OS操作系统的电脑一台 Xcode AppStore账号 首先是需要电脑。OK，到了这一步，我想。。。应该有三种方式~ Mac系列，无论是Mac Air、Mac Pro系列，都能够流畅运行Mac OS系统。 虚拟机，如果没有额外的金钱，并且电脑性能撑得住的话，可以使用虚拟机来体验一下，建议内存在8G以上。教程链接：http:\\\\jingyan.baidu.com\\article\\bea41d4388a8c4b4c51be6ab.html 黑苹果，在除Mac电脑系列外的组装电脑或笔记本上进行安装Mac OS，不过这种活找技术人员吧。。。一般来说驱动不好弄的。。。 工具——Xcode 在系统中找到AppStore，搜索Xcode，然后获取即可 账号 注册链接：https:\\www.apple.com\\ 好了，现在准备工作大体就做好了~ 基础知识 本章你需要知道的知识—— 啥是基本数据类型 啥是类，啥是对象 基本数据类型 整型 -&gt; 长整型(long)、短整型(short int)、整型(int) 浮点型 -&gt; 单精度浮点型(float)、双精度浮点型(double) 字符型(char) 对于上述类型，一般有过编程基础的应该都知道。 类和对象什么是类？ 举个栗子：人类。人类就是一个类，大体抽象出来是由什么组成的呢？简单来说就是头和四肢。 什么是对象？ 举个栗子：个人。每个人都是不一样的，在世上都是独一无二的，针对每个人那就可以称之为对象了。","comments":true,"tags":[{"name":"iOS","slug":"iOS","permalink":"http://a5566baga.cn/tags/iOS/"}]},{"title":"FitBody商家端需求分析","date":"2017-02-09T12:54:01.000Z","path":"2017/02/09/FitBody商家端需求分析/","text":"商家端功能需求分析 注册/登陆设置店铺信息维护菜单订单维护其它功能 注册/登陆注册证件、名称、合格证等 登陆只能通过用户名和密码登录，无第三方登陆 设置店铺信息封面名称宣传语… 维护菜单菜单添加餐单修改菜单删除菜单查看菜单内容有名称、图片、食材、卡路里数、重量、价格 订单维护接订单提交派送订单处理退货订单查看订单回复 其它功能关闭店铺清除缓存联系客服","comments":true,"tags":[{"name":"毕业设计","slug":"毕业设计","permalink":"http://a5566baga.cn/tags/毕业设计/"}]},{"title":"struts2.5版本基本配置","date":"2017-02-08T14:08:13.000Z","path":"2017/02/08/struts2-5版本基本配置/","text":"稍后继续…","comments":true,"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://a5566baga.cn/tags/JAVA/"},{"name":"struts2","slug":"struts2","permalink":"http://a5566baga.cn/tags/struts2/"}]},{"title":"struts2.3版本基本配置","date":"2017-02-08T14:07:56.000Z","path":"2017/02/08/struts2-3版本基本配置/","text":"struts2.3版本基本搭建使用 使用环境 struts-2.3.31jdk1.8eclipse neon (4.6.1) 官网下载地址Struts官网下载页面 目录结构 appdocslibsrcANTLR-LICENSE.txtCLASSWORLDS-LICENSE.txtFREEMARKER-LICENSE.txtLICENSE.txtNOTICE.txtOGNL-LICENSE.txtOVAL-LICENSE.txtSITEMESH-LICENSE.txtXPP3-LICENSE.txtXSTREAM-LICENSE.txt 官方Demo参考 自己的登陆搭建web.xml 配置过滤器123456789101112131415161718&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\"&gt; &lt;filter&gt; &lt;filter-name&gt;struts2&lt;/filter-name&gt; &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;struts2&lt;/filter-name&gt; &lt;url-pattern&gt;*.action&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;/index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt;&lt;/web-app&gt; 注意： &lt;url-pattern&gt;是过滤的内容 &lt;filter-class&gt;在2.3版本要这么写 struts.xml1234567891011121314&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE struts PUBLIC \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\" \"http://struts.apache.org/dtds/struts-2.5.dtd\"&gt; &lt;struts&gt; &lt;package name=\"zzq\" extends=\"struts-default\" namespace=\"/\"&gt; &lt;!-- 登陆，登出 --&gt; &lt;action name=\"Login\" class=\"ben.com.action.LoginAction\"&gt; &lt;result name=\"success\" type=\"dispatcher\"&gt;/jsp/system/admin.jsp&lt;/result&gt; &lt;result name=\"error\" type=\"dispatcher\"&gt;/jsp/login/login.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 注意： 必须要配置一个&lt;package name=&quot;zzq&quot; extends=&quot;struts-default&quot; namespace=&quot;/&quot;&gt; &lt;action&gt;标签内的name属性与jsp中传的参数相同 LoginAction.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980package ben.com.action;import java.net.URLEncoder;import javax.servlet.http.Cookie;import javax.servlet.http.HttpSession;import org.apache.catalina.Session;import org.apache.struts2.ServletActionContext;import com.ben.pojo.Users;import com.ben.service.UsersService;import com.ben.utils.CookieUtils;import com.opensymphony.xwork2.Action;public class LoginAction implements Action &#123; private Users user; private String checkCode; private boolean autoLogin; private String errorStr; UsersService usersService = new UsersService(); @Override public String execute() throws Exception &#123; HttpSession session = ServletActionContext.getRequest().getSession(); System.out.println(session.getAttribute(\"user\")); String piccode = (String) session.getAttribute(\"piccode\"); if(piccode.equals(checkCode.toUpperCase()))&#123; user = usersService.findUsers(user); if(user != null)&#123;// 添加cookie和session CookieUtils.addCookie(\"userName\", URLEncoder.encode(user.getUserName(), \"UTF-8\"), ServletActionContext.getResponse(), 99999999, \"/\"); CookieUtils.addCookie(\"password\", user.getPassword(), ServletActionContext.getResponse(), 999999999, \"/\"); session.setAttribute(\"user\", user); return \"success\"; &#125;else&#123; errorStr = \"用户名或密码有误\"; &#125; &#125;else&#123; errorStr = \"验证码错误\"; &#125; return \"error\"; &#125; public Users getUser() &#123; return user; &#125; public void setUser(Users user) &#123; this.user = user; &#125; public String getCheckCode() &#123; return checkCode; &#125; public void setCheckCode(String checkCode) &#123; this.checkCode = checkCode; &#125; public boolean isAutoLogin() &#123; return autoLogin; &#125; public void setAutoLogin(boolean autoLogin) &#123; this.autoLogin = autoLogin; &#125; public String getErrorStr() &#123; return errorStr; &#125; public void setErrorStr(String errorStr) &#123; this.errorStr = errorStr; &#125;&#125; 注意： struts会自动封装对象 注意jsp中EL表达式与struts直接封装对象的key进行区分使用 基本配置规范是这样","comments":true,"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://a5566baga.cn/tags/JAVA/"},{"name":"struts2","slug":"struts2","permalink":"http://a5566baga.cn/tags/struts2/"}]},{"title":"struts2使用注意","date":"2017-02-08T13:56:21.000Z","path":"2017/02/08/struts2使用注意/","text":"版本区别 struts2.3struts2.5 struts2.3版本struts2.3版本基本配置struts2.5版本struts2.5版本基本配置","comments":true,"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://a5566baga.cn/tags/JAVA/"},{"name":"struts2","slug":"struts2","permalink":"http://a5566baga.cn/tags/struts2/"}]},{"title":"FitBody客户端功能设计","date":"2017-02-06T11:34:46.000Z","path":"2017/02/06/FitBody客户端功能设计/","text":"FitBody客户端功能分析 登录浏览菜品下单查看订单详情签收个人设置分享 登录注册 手机号注册 登录 第三方登录账号登录 浏览菜品主页浏览通过查询浏览通过分类的标签浏览—&gt; 查看详情页面 点击收藏 加入购物车 下单通过购物车下单 查看订单详情历史订单正在运送的订单未评论的订单 签收输入密码支付 评分评论 退货 退货原因证据图片 个人设置登录退出清除缓存管理收货地址修改个人姓名修改个人头像修改个人喜好 分享菜品详情里面分享订单分享应用分享","comments":true,"tags":[{"name":"毕业设计","slug":"毕业设计","permalink":"http://a5566baga.cn/tags/毕业设计/"}]},{"title":"简单斗鱼网站页面","date":"2017-02-06T10:43:47.000Z","path":"2017/02/06/简单斗鱼网站页面/","text":"利用H5和CSS3制作简单的斗鱼页面 利用的技术有 video标签 CSS3的动画 自定义控制按钮 引入第三方字体图标 页面布局index.html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;张增强H5考核&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"css/style.css\"&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/iconfont.css\"&gt; &lt;script src=\"js/jquery-1.8.3.js\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"container\"&gt; &lt;!-- header标题栏，里面嵌套一个居中的div --&gt; &lt;header class=\"header\"&gt; &lt;div class=\"header-div\"&gt; &lt;div class=\"div-icon\"&gt;&lt;/div&gt; &lt;div class=\"div-list\"&gt; &lt;ul class=\"div-list-ul\"&gt; &lt;li&gt;首页&lt;/li&gt; &lt;li&gt;直播&lt;/li&gt; &lt;li&gt;分类&lt;/li&gt; &lt;li&gt;游戏&lt;/li&gt; &lt;li&gt;鱼吧&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=\"div-searchBar\"&gt; &lt;input type=\"text\" name=\"searchBar\" value=\"\" placeholder=\"斗鱼直播\"&gt; &lt;i class=\"iconfont icon-sousuo\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=\"div-login\"&gt; &lt;i class=\"iconfont icon-user\"&gt;&lt;/i&gt; &lt;a href=\"\" class=\"div-login-a\"&gt;登录&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href=\"\" class=\"div-login-a\"&gt;注册&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/header&gt; &lt;!-- 左边的section ul布局--&gt; &lt;section class=\"section-left\"&gt; &lt;ul class=\"section-left-list\"&gt; &lt;li&gt;&lt;i class=\"iconfont icon-zhibo\"&gt;&lt;/i&gt;&lt;span&gt;直播&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;i class=\"iconfont icon-tuceng\"&gt;&lt;/i&gt;&lt;span&gt;分类&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;i class=\"iconfont icon-paixing\"&gt;&lt;/i&gt;&lt;span&gt;排行榜&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;i class=\"iconfont icon-guanzhu\"&gt;&lt;/i&gt;&lt;span&gt;关注&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;i class=\"iconfont icon-youxi\"&gt;&lt;/i&gt;&lt;span&gt;游戏&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;i class=\"iconfont icon-666\"&gt;&lt;/i&gt;&lt;span&gt;客服&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/section&gt; &lt;div class=\"middle\"&gt; &lt;!-- 中间一个大section 上下俩部分--&gt; &lt;section class=\"section-middle\"&gt; &lt;div class=\"middle-titleDiv\"&gt; &lt;div class=\"titleDiv-icon\"&gt;&lt;/div&gt; &lt;div class=\"titleDiv-title\"&gt; &lt;div class=\"titleDiv-title-titleName\"&gt;极客学院的直播&lt;/div&gt; &lt;div class=\"titleDiv-title-jubao\"&gt;举报&lt;/div&gt; &lt;/div&gt; &lt;div class=\"titleDiv-title-type\"&gt; 热门直播&amp;nbsp;/&amp;nbsp;教育行业&amp;nbsp;/&amp;nbsp;高新培训 &lt;/div&gt; &lt;div class=\"titleDiv-title-watchNum\"&gt; &lt;i class=\"iconfont icon-guankancishu\"&gt;&lt;/i&gt; &lt;span&gt;观看10万&lt;/span&gt; &lt;/div&gt; &lt;!-- 关注按钮 --&gt; &lt;div class=\"titleDiv-like\"&gt; &lt;div class=\"titleDiv-like-icon\"&gt; &lt;i class=\"iconfont icon-guanzhu\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=\"titleDiv-like-num\"&gt; 23456 &lt;/div&gt; &lt;/div&gt; &lt;!-- 二维码 --&gt; &lt;div class=\"like-code\"&gt; &lt;div class=\"like-code-arrow\"&gt;&lt;/div&gt; &lt;div class=\"like-code-line\"&gt;&lt;/div&gt; &lt;div class=\"like-code-pic\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"middle-videoDiv\"&gt; &lt;video id=\"video\" preload=\"metadata\" width=\"816\" height=\"340\" poster=\"img/post.png\"&gt; &lt;source src=\"video/oceans.mp4\" type=\"video/mp4\"&gt; &lt;source src=\"video/oceans.ogv\" type=\"video/ogm\"&gt; &lt;source src=\"video/oceans.webm\" type=\"video/webm\"&gt; &lt;/video&gt; &lt;div class=\"videoDiv-btnDiv\"&gt; &lt;a id=\"playBtn\"&gt;&lt;i class=\"iconfont icon-bofangqibofang\"&gt;&lt;/i&gt;&lt;/a&gt; &lt;a id=\"voiceBtn\"&gt;&lt;i class=\"iconfont icon-tushubofangqiyousheng\"&gt;&lt;/i&gt;&lt;/a&gt; &lt;a id=\"fullScreenBtn\"&gt;&lt;i class=\"iconfont icon-bofangqiquanping\"&gt;&lt;/i&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!-- 右边一个section 上下俩部分--&gt; &lt;section class=\"section-right\"&gt; &lt;div class=\"right-pic\"&gt;&lt;/div&gt; &lt;div class=\"right-live\"&gt; &lt;div class=\"right-live-title\"&gt; 直播公告 &lt;/div&gt; &lt;div class=\"right-live-text\"&gt; 这是直播公告&lt;br&gt; 1、不准义气用事&lt;br&gt; 2、严格遵守弹幕礼仪 &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=\"js/main.js\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; CSS样式style.csspadding: 0px; margin: 0px; font-family: \"黑体\";&#125;ul&#123; list-style: none;&#125;/*header设置*/.header&#123; width: 100%; height: 58px; position: relative; background-color: #f1f1f1; border-bottom: 1px solid #EBEBEB; border-top: 1px solid #EBEBEB;&#125;.header-div&#123; width: 1210px; min-width: 1210px; height: 58px; margin: 0px auto; padding-left: 57px; /*margin-left: 60px;*/ /*border: 1px solid red;*/ background-color: #f1f1f1; /*border-bottom: 1px solid #fdfdfd;*/ /*border-top: 1px solid #fdfdfd;*/&#125;.middle&#123; width: 1210px; min-width: 1210px; margin: 0px auto; position: relative; padding-left: 57px;&#125;.div-icon&#123; width: 72px; height: 29px; background-image: url(\"../img/logo.png\"); background-repeat: round; float: left; margin-top: 15px; margin-right: 36px; /*border: 1px solid red;*/&#125;.div-list&#123; float: left; width: 269px; height: 20px; margin-top: 19px;&#125;.div-list-ul&#123; width: 290px; height: 20px; text-align: center; line-height: 20px; font-size: 16px; /*border: 1px solid red;*/&#125;.div-list-ul li&#123; display: inline-block; float: left; width: 37px; height: 20px; margin-right: 21px;&#125;.div-list-ul li:hover&#123; cursor: pointer;&#125;/*搜索框*/.div-searchBar&#123; float: left; margin-left: 400px; width: 150px; height: 26px; margin-top: 16px; margin-right: 103px; background-color: white; border-radius: 13px;&#125;.div-searchBar input&#123; display: block; width: 100px; height: 20px; float: left; margin-left: 15px; margin-top: 3px; color: #B8B8B8; font-size: 14px; outline: none; border-style: none; background-color: white;&#125;.div-searchBar i&#123; width: 20px; height: 20px; float: right; margin-top: 5px; margin-right: 3px;&#125;/*登录区域*/.div-login&#123; width: 115px; height: 20px; float: left; margin-top: 19px; /*border: 1px solid red;*/&#125;.div-login i&#123; float: left; margin-right: 20px; margin-top: 3px;&#125;.div-login-a&#123; width: 35px; height: 20px; line-height: 20px; font-size: 16px; text-decoration: none; text-align: center; color: black; display: block; float: left;&#125;.div-login-a:hover&#123; text-decoration: underline;&#125;.div-login span&#123; width: 5px; height: 20px; display: block; float: left; text-align: center; margin-right: 3px;&#125;/*左侧*/.section-left&#123; width: 47px; height: 100%; background-color: #2D2D2D; position: absolute;&#125;.section-left-list&#123; width: 47px; height: 372px; font-size: 13px;&#125;.section-left-list li&#123; display: block; width: 47px; height: 62px; color: #A1A1A1; position: relative; border-bottom: 1px solid #A1A1A1;&#125;.section-left-list li i&#123; display: block; width: 16px; height: 16px; margin:0px auto; padding-top: 16px;&#125;.section-left-list li span&#123; font-weight: bold; width: 100%; height: 15px; text-align: center; float: left;&#125;.section-left-list li:hover&#123; cursor: pointer; color: #DC641C;&#125;/*中间的section*/.section-middle&#123; /*display: inline-block;*/ width: 816px; height: 588px; position: absolute; /*float: left;*/ /*margin-left: 57px;*/ margin-top: 20px; /*border: 1px solid red;*/&#125;/*标题栏*/.middle-titleDiv&#123; width: 815px; height: 90px; position: absolute; border: 1px solid #EBEBEB; border-radius: 10px;&#125;.titleDiv-icon&#123; width: 90px; height: 90px; float: left; border-radius: 10px; background-image: url(\"../img/logo.png\"); background-repeat: no-repeat; background-color: #ADEC4D; background-position: 0px 15px;&#125;/*房间名*/.titleDiv-title&#123; width: 180px; height: 20px; /*float: left;*/ /*margin-left: 10px;*/ /*margin-top: 10px;*/ position: absolute; top: 10px; left: 100px;&#125;.titleDiv-title-titleName&#123; display: inline-block; width: 140px; height: 20px; line-height: 20px; font-size: 18px; font-weight: bold;&#125;.titleDiv-title-jubao&#123; width: 30px; height: 15px; line-height: 15px; font-size: 11px; font-weight: bold; font-family: \"黑体\"; color: #B0B0B0; float: right; margin-top: 5px;&#125;.titleDiv-title-jubao:hover&#123; cursor: pointer; text-decoration: underline;&#125;/*类型*/.titleDiv-title-type&#123; width: 240px; height: 18px; line-height: 18px; font-size: 10px; font-family: \"黑体\"; text-align: left; position: absolute; top: 38px; left: 100px; /*border: 1px solid red;*/ /*transform: scale(0.8);*/&#125;/*观看人数*/.titleDiv-title-watchNum&#123; width: 100px; height: 16px; line-height: 16px; position: absolute; bottom: 8px; left: 100px; font-size: 10px; /*border: 1px solid red;*/&#125;.titleDiv-title-watchNum i&#123; width: 16px; height: 16px; position: absolute; top: 2px;&#125;.titleDiv-title-watchNum span&#123; position: absolute; left: 18px;&#125;/*关注按钮*/.titleDiv-like&#123; width: 105px; height: 36px; border: 1px solid #dc641c; position: absolute; right: 30px; top: 27px; border-radius: 18px; overflow: hidden;&#125;.titleDiv-like:hover&#123; cursor: pointer;&#125;.titleDiv-like:hover .icon-guanzhu&#123; /*color: red;*/ /*transform: scale(1.3);*/ animation: likeBtn 0.8s ease-in-out;&#125;@keyframes likeBtn &#123; 0%&#123; /*line-height: 16px;*/ /*font-size: 15px;*/ transform: scale(1.0); &#125; 50%&#123; /*line-height: 20px;*/ /*font-size: 18px;*/ transform: scale(1.2); color: red; &#125; 100%&#123; /*line-height: 16px;*/ /*font-size: 15px;*/ transform: scale(1.0); color: white; &#125;&#125;.titleDiv-like-icon&#123; width: 43px; height: 36px; background-color: #dc641c; position: absolute;&#125;.titleDiv-like-icon .icon-guanzhu&#123; width: 16px; height: 16px; line-height: 16px; font-size: 15px; color: white; position: absolute; top: 10px; left: 15px; /*transition: all 0.4s linear;*/&#125;.titleDiv-like-num&#123; width: 62px; height: 36px; line-height: 36px; text-align: center; font-weight: bold; position: absolute; right: 0px;&#125;/*二维码*/.like-code&#123; width: 198px; height: 196px; border: 1px solid #EBEBEB; border-radius: 5px; position: absolute; right: -13px; top: 75px; background-color: white; z-index: 2; display: none; /*overflow: hidden;*/&#125;.like-code-arrow&#123; width: 0px; border-top: 8px solid rgba(0,0,0,0); border-right: 8px solid rgba(0,0,0,0); border-bottom: 8px solid rgba(0,0,0,0); border-left: 8px solid #dc641c; transform: rotate(-90deg); z-index: 2; position: absolute; top: -14px; left: 95px;&#125;.like-code-line&#123; width: 198px; height: 5px; border-radius: 5px; border-top: 5px solid #dc641c;&#125;.like-code-pic&#123; background-image: url(\"../img/qr.png\"); width: 185px; height: 182px; background-repeat: round; position: absolute; top: 10px; left: 8px;&#125;.titleDiv-like:hover~.like-code&#123; display: block; animation: likeCodeShow 0.6s ease-in-out;&#125;@keyframes likeCodeShow &#123; 0%&#123; transform: scale(0); &#125; 80%&#123; transform: scale(1); &#125; 90%&#123; transform: scale(0.8); &#125; 100%&#123; transform: scale(1); &#125;&#125;/*视频*/.middle-videoDiv&#123; width: 816px; height: 340px; position: absolute; top: 109px; padding-top: 30px; padding-bottom: 30px; background-color: #3D3D3D; /*border: 1px solid red;*/ overflow: hidden;&#125;.middle-videoDiv:hover .videoDiv-btnDiv&#123; animation: btnDivShow 0.5s linear;&#125;@keyframes btnDivShow &#123; from&#123; &#125; to&#123; &#125;&#125;#video&#123;&#125;/*视频按钮*/.videoDiv-btnDiv&#123; width: 816px; height: 30px; position: absolute; float: left; text-align: center; bottom: -30px; transition: all 0.5s linear; /*display: none;*/&#125;.middle-videoDiv:hover .videoDiv-btnDiv&#123; bottom: 0px;&#125;.videoDiv-btnDiv a&#123; text-decoration: none; color: white; height: 30px; margin-right: 40px; text-align: center; /*float: left;*/&#125;.videoDiv-btnDiv a:hover i&#123; cursor: pointer;&#125;.videoDiv-btnDiv a i&#123; width: 30px; height: 30px; line-height: 30px; font-size: 17px; /*position: absolute;*/ /*border: 1px solid red;*/ transition: all 0.5s linear;&#125;#playBtn:hover&#123; color: #DC641C;&#125;#voiceBtn:hover&#123; color: #DC641C;&#125;#fullScreenBtn:hover&#123; color: #DC641C;&#125;/*右边直播公告*/.section-right&#123; width: 323px; height: 300px; /*border: 1px solid red;*/ float: left; /*margin-left: 15px;*/ /*background-color: red;*/ position: absolute; left: 887px; top: 20px;&#125;.right-pic&#123; width: 323px; height: 80px; border-radius: 5px; overflow: hidden; background-image: url(\"../img/201612161232582097.png\");&#125;.right-live&#123; width: 323px; height: 200px; border: 1px solid #EBEBEB; border-radius: 5px; position: absolute; top: 95px;&#125;.right-live-title&#123; width: 280px; height: 30px; font-size: 25px; font-family: \"黑体\"; line-height: 30px; padding-bottom: 8px; font-weight: bold; border-bottom: 1px solid #EBEBEB; position: absolute; left: 20px; top: 20px;&#125;.right-live-text&#123; width: 280px; height: 30px; font-size: 16px; /*font-weight: bold;*/ font-family: \"黑体\"; position: absolute; left: 20px; top: 80px;&#125; 自定义video按钮控制main.js123456789101112131415161718192021222324252627282930313233343536373839404142var video = document.getElementById(\"video\");video.volume = 1;var playBtn = document.getElementById(\"playBtn\");var voiceBtn = document.getElementById(\"voiceBtn\");var fullScreenBtn = document.getElementById(\"fullScreenBtn\");playBtn.addEventListener(\"click\", function () &#123; // alert(\"111\"); if(video.paused)&#123; video.play(); $(\"#playBtn i\").removeClass(\"iconfont icon-bofangqibofang\"); $(\"#playBtn i\").addClass(\"iconfont icon-bofangqizanting\"); &#125;else &#123; video.pause(); $(\"#playBtn i\").removeClass(\"iconfont icon-bofangqizanting\"); $(\"#playBtn i\").addClass(\"iconfont icon-bofangqibofang\"); &#125;&#125;);voiceBtn.addEventListener(\"click\", function () &#123; // alert(\"111\"); if(video.volume == 1)&#123; video.volume = 0; $(\"#voiceBtn i\").removeClass(\"iconfont icon-tushubofangqiyousheng\"); $(\"#voiceBtn i\").addClass(\"iconfont icon-yinliangguan\"); &#125;else &#123; video.volume = 1; $(\"#voiceBtn i\").removeClass(\"iconfont icon-yinliangguan\"); $(\"#voiceBtn i\").addClass(\"iconfont icon-tushubofangqiyousheng\"); &#125;&#125;);fullScreenBtn.addEventListener(\"click\", function () &#123; // alert(\"111\"); if(video.requestFullscreen) &#123; video.requestFullscreen(); &#125; else if(video.mozRequestFullScreen) &#123; video.mozRequestFullScreen(); &#125; else if(video.webkitRequestFullscreen) &#123; video.webkitRequestFullscreen(); &#125;&#125;); 字体的引入首先，将相关资源拷到css路径下css引入1&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/iconfont.css\"&gt; 使用1&lt;i class=\"iconfont icon-sousuo\"&gt;&lt;/i&gt; 示例： 结果效果图","comments":true,"tags":[{"name":"前台","slug":"前台","permalink":"http://a5566baga.cn/tags/前台/"}]},{"title":"调查问卷","date":"2017-02-05T14:26:54.000Z","path":"2017/02/05/调查问卷/","text":"健身餐需求调查表 毕业设计需求分析阶段——分析用户人群，提炼应用功能健身餐需求调查表 1、性别 (单选题 *必答) ○ 男 ○ 女 2、您平时是否有健身的习惯或是行为？ (单选题 *必答) ○ 常态 ○ 偶尔 ○ 不是很喜欢运动方面 3、您选择健身的目的？ (多选题 *必答) □ 减肥 □ 为了一个好身材 □ 保持活力 □ 就是放松玩~ 4、是否知道饮食对健身的重要性？ (单选题 *必答) ○ 是的，三分练七分吃 ○ 不是很清楚，但也稍有注意 ○ 不知道啊，日常吃饭 5、您平时的就餐方式？ (单选题 *必答) ○ 自己做 ○ 出去吃 6、您平时做菜选用的食材有哪些？ (多选题 *必答) □ 鸡肉 □ 牛肉 □ 蛋类 □ 虾类海鲜 □ 果蔬 □ 面制品 □ 大米 □ 其它 7、您平时就餐喜欢用外卖类的app吗？ (单选题 *必答) ○ 常用 ○ 偶尔 ○ 不用 8、如果该网站（app）同时提供营养餐配送，您比较在意哪些方面？ (多选题 *必答) □ 口味 □ 卫生透明程度 □ 食材品质 □ 吃了对健身是否有效果 □ 价格 □ 种类 9、如果有一个app平台提供了健身餐相关内容，你是否有兴趣使用？ (单选题 *必答) ○ 有 ○ 无 ○ 我已经很权威了，不需要第三方 10、希望营养餐提供方式？ (多选题 *必答) □ 独自营运 □ 与健身房合作 □ 普通餐饮业也可参与 11、能接受的套餐价格？ (单选题 *必答) ○ 每份20以内，我减肥果蔬多 ○ 每份15-50，我增肌，肉吃的多 ○ 看重效果和品质，价格只要不离谱就行 ○ 我收入不高，还是算了吧 12、请选择您的饮食支出？ (单选题 *必答) ○ 1000以下 ○ 1000~2000 ○ 2000以上","comments":true,"tags":[{"name":"毕业设计","slug":"毕业设计","permalink":"http://a5566baga.cn/tags/毕业设计/"}]},{"title":"CSS3动画","date":"2017-02-05T02:15:23.000Z","path":"2017/02/05/CSS3动画/","text":"CSS3之2D/3D动画 2D的变换3D的变换动画 2D动画的变换基本说明 方法名称 作用 translate() 移动元素 rotate() 旋转元素 scale() 缩放元素 skew() 倾斜元素 matrix() 利用公式改变元素 注意：一般要写不同浏览器的适配123transform: ;-ms-transform: ; /* IE 9 */-webkit-transform: ; /* Safari and Chrome */ 1transform-origin:20% 40%; 变换的源点设定 移动位置1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;2d_01&lt;/title&gt; &lt;style type=\"text/css\"&gt; .div1, .div2 &#123; width: 100px; height: 100px; background: skyblue; margin: 0px auto; border: 1px solid black; &#125; .div2 &#123; transform: translate(200px); &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"div1\"&gt; 初始位置 &lt;/div&gt; &lt;div class=\"div2\"&gt; 移动的位置 &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 缩放 注意 scaleX() 缩放X轴scaleY() 缩放Y轴scale() 里面一个参数是X/Y缩放相同，两个参数，第一个是X轴的，第二个是Y轴的 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;缩放&lt;/title&gt; &lt;style type=\"text/css\"&gt; .div1, .div2 &#123; width: 100px; height: 100px; margin-left: 200px; margin-top: 200px; border: 1px solid black; background-color: skyblue; float: left; &#125; .div2 &#123; transform: scale(1.5); &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"div1\"&gt; 原來大小 &lt;/div&gt; &lt;div class=\"div2\"&gt; 现在大小 &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 旋转 注意: transform: rotate(45deg); 绕顺时针旋转transform: rotateX(45deg); 绕X轴旋转transform: rotateY(45deg); 绕Y轴旋转transform: rotateZ(45deg); 绕Z轴旋转 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;旋转&lt;/title&gt; &lt;style type=\"text/css\"&gt; .div1, .div2&#123; width: 100px; height: 100px; margin: 200px 200px; margin: 100px; float: left; border: 1px solid black; background-color: skyblue; &#125; .div2&#123; transform: rotate(45deg); &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"div1\"&gt; 初始状态 &lt;/div&gt; &lt;div class=\"div2\"&gt; 旋转之后的状态 &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 倾斜 注意: transform: skew(45deg); 倾斜的角度，逆时针transform: skewX(45deg); X轴倾斜transform: skewY(45deg); Y轴倾斜 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;倾斜&lt;/title&gt; &lt;style type=\"text/css\"&gt; .div1, .div2&#123; width: 100px; height: 100px; border: 1px solid black; background-color: skyblue; margin: 100px 100px; float: left; &#125; .div2&#123; transform: skew(45deg); &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"div1\"&gt; 初始状态 &lt;/div&gt; &lt;div class=\"div2\"&gt; 变换状态 &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 公式变化matrix() matrix()里面需要填6个参数，是一个矩阵的算法 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;公式变换&lt;/title&gt; &lt;style type=\"text/css\"&gt; .div1, .div2&#123; width: 100px; height: 100px; border: 1px solid black; background-color: skyblue; margin: 100px 100px; float: left; &#125; .div2&#123; transform:matrix(0.866,0.5,-0.5,0.866,0,0); &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"div1\"&gt; 初始状态 &lt;/div&gt; &lt;div class=\"div2\"&gt; 变换状态 &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 可以实现的效果 3D动画的变换基本属性、方法说明 属性 参数 描述 transform 方法 元素的转换方式 transform-origin X,Y 从那个位置开始转换 transform-style - flatpreserve-3d 表示所有子元素在2D平面呈现。表示所有子元素在3D空间中呈现。 perspective numbernone 元素距离视图的距离，像素单位默认值 perspective-origin x-axisy-axis 默认值50%leftcenterrightlength%默认值50%topcenterbottomlength%设置一个3D元素的基数位置 backface-visibility visiblehidden 背面是可见的背面是不可见的 3D转换方法，与2D使用类似 函数 描述 matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n) 定义 3D 转换，使用 16 个值的 4x4 矩阵。 translate3d(x,y,z) 定义 3D 转化。 translateX(x) 定义 3D 转化，仅使用用于 X 轴的值。 translateY(y) 定义 3D 转化，仅使用用于 Y 轴的值。 translateZ(z) 定义 3D 转化，仅使用用于 Z 轴的值。 scale3d(x,y,z) 定义 3D 缩放转换。 scaleX(x) 定义 3D 缩放转换，通过给定一个 X 轴的值。 scaleY(y) 定义 3D 缩放转换，通过给定一个 Y 轴的值。 scaleZ(z) 定义 3D 缩放转换，通过给定一个 Z 轴的值。 rotate3d(x,y,z,angle) 定义 3D 旋转。 rotateX(angle) 定义沿 X 轴的 3D 旋转。 rotateY(angle) 定义沿 Y 轴的 3D 旋转。 rotateZ(angle) 定义沿 Z 轴的 3D 旋转。 perspective(n) 定义 3D 转换元素的透视视图。 动画普通动画效果设置transition属性1transition: all 2s linear; 第一个参数：要改变的值，要是全部都可以变就用all第二个参数：是此变化需要多少时间完成第三个参数：以什么样的节奏变化，线性还是慢进快出等样式 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; .div1&#123; width: 100px; height: 100px; background-color: skyblue; transition: all 2s linear; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"div1\"&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 帧动画效果关键的代码成为 第一个参数：关键帧的名字第二个参数：持续时间第三个参数：重复的次数或是样式 1animation:myfirst 5s 2; from：初始状态from：结束状态 from和to也可以写成10%{}样式，精确到某个阶段 123456789@keyframes myfirst&#123; from&#123; &#125; to&#123; margin-left: 200px; margin-top: 200px; &#125;&#125; 属性表 属性 值 描述 @keyframes 名称持续时间百分比CSS样式 必须0-100%fromtoCSS属性 animation name duration timing-function delay iteration-count direction fill-mode play-state 关键帧名称时间一个周期样式延迟次数是否反向播放不播放时的样式是否运行 animation-name 关键帧名称 关键帧名称 animation-duration 延迟时间 默认值为 0，意味着没有动画效果 animation-timing-function lineareaseease-inease-outease-in-outcubic-bezier(n,n,n,n) 匀速低速开始，然后加快，在结束前变慢动画以低速开始动画以低速结束动画以低速开始和结束在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值 animation-delay time 延迟时间 animation-iteration-count ninfinite 规定次数无限次 animation-direction normalreversealternatealternate-reverseinitialinherit 默认值。动画按正常播放。动画反向播放。动画在奇数次（1、3、5…）正向播放，在偶数次（2、4、6…）反向播放。动画在奇数次（1、3、5…）反向播放，在偶数次（2、4、6…）正向播放。设置该属性为它的默认值从父元素继承该属性 animation-play-state pausedrunning 指定暂停动画指定正在运行的动画","comments":true,"tags":[{"name":"前台","slug":"前台","permalink":"http://a5566baga.cn/tags/前台/"}]},{"title":"开题报告","date":"2017-02-04T14:24:46.000Z","path":"2017/02/04/开题报告/","text":"FitBody健身餐外卖app开题报告 课题研究的目的和意义（文献综述）课题研究方案和主要内容研究方法及技术途径实施计划 课题研究的目的和意义（文献综述）研究的意义&ensp;&ensp;&ensp;&ensp;伴随着经济的发展，现在80、90后作为社会上工作人员的重要组成部分，对于饮食上的要求已经不是单纯的“吃饱而已”，而是随着自身产生的经济价值而去寻求更好的内容。并且近年来互联网的快速发展，外卖行业进步也是丰富了年轻人的选择，也是在快节奏的生活节奏之中应运而生。伴随着“全民健身”的口号，目前出入健身房的人也是越来越多，晨跑、夜跑的健身人群也是只增不减。根据“环球体育传媒”发布的“16年中国健身服务行业发展现状及未来市场规模预测分析”中指出，“我国健身行业发展空间大，居民消费升级注重身心健康，政府层面持续推进大众健身，以及社交媒体共同驱动行业成长。但是目前行业盈利模式单一，主要靠预售卡与私教，正从零售业向服务业升级，未来变现将更加多元化。”在健身行业的发展是相当迅速，但目前营业手段较为单一，未来要实现多元化，而这个多元化之一就是要在吃上下手。健身圈中一直有这么一句话——“三分练，七分吃”，吃的重要性可见一斑。也正是因为吃的重要性，现在除去专业健身人员知道怎么吃、如何吃之外，很多工作的人群对于吃仍是不明白，也造成一部分健身人群三天打鱼两天晒网的情况，钱花了，时间也花了，但是身材仍未改变这一社会现象。&ensp;&ensp;&ensp;&ensp;FitBody外卖app主要的针对人群是健身人群以及一些无时间健身但是有能力消费并且想要健康品质餐饮的白领阶层。针对现在流行的外卖运营方式为广大健身爱好者提供专业的减脂、增肌产品。这么来说，在“2016中国食品产业发展趋势报告”中指出现在的消费者的钟爱市场特称有，一是消费者的餐饮用途多元而导致的餐饮需求多样化，二是针对单个消费者的口味多元而导致的餐饮需求多样化。而做健身餐饮这方面，正是弥补的一部分的餐饮空白以及互联网上的认知度，同时针对不同用户的群体也有不同的菜品需求，完全符合当前的消费趋势和用户的消费心理。 国内外研究现状、水平和发展趋势&ensp;&ensp;&ensp;&ensp;目前针对于国外，由于专精度的不同，也是国内外健身发展的速度不一样，发展趋势也不同。国外的健身人群，对于饮食这一部分可选的种类较多，一般健身爱好者通常是自己做，另外高级一点的健身房内也有相应的配餐休息处，外卖体系也较为完善，快餐店很多，通常打电话即可实现订餐，参考度不大。针对于国内的市场，这个蛋糕空白相当大，在经过网上的资料搜索和在本市内的实地考察中，还未发现有完整良好的运作团体。目前也是只有少数的健身爱好者开的实体店，还有针对于高端人群的健身餐订购网站，订购后还需要自己加工，并且价格偏高。国内是一个还在摸索和探索阶段。但是国内的外卖的整合体系做的相当不错，外卖运送流程也具备中国特色，已经较为完善。在刘柳《共享经济时代&nbsp;私厨将向何处去》中指出，虽然现在外卖的盛行，外加私厨的加入，虽然导致了一定的对于饮食方面安全的质疑态度，但是未来是在向诚信、相互监督中前进。在结尾中也指出“另外部分私厨平台会主打容易标准化批量生产的高端饮食，比如面向健身人群的减脂餐”，可以看出这方面的市场的存在，并且现在尚未流行，在更见完善的监督机制来临时，这部分会是盛行趋势。&ensp;&ensp;&ensp;&ensp;例如国内起步较早的“饿了吗”、“美团外卖”和“百度外卖”这三巨头，通过整合商家实现平台统一，配送人员也有最初的商家自己配送升级成为现在的专门的配送人员进行外卖配送，为今后规范外卖市场起到了良好的促进作用。在郑文静《基于O2O模式的外卖订餐APP的设计研究》指出“随着生活节奏的加快和工作学习压力的加大，越来越多的上班族和学生族开始钟情于外卖订餐，外卖订餐APP就是主要针对上班族及学生族的需求而开发的。手机的普及和移动互联网的快速发展，用户可以利用休息、上下班路上或是奔波途中等碎片化时间来使用APP进行订餐。另外上班族在解决温饱也追求美食，学生族在追求便捷的同时，也追求价格低廉。而外卖订餐APP恰好满足了这二者的追求，增加了消费者的就餐选择并可以在价格上进行比较，大大提升了上班族和学生族的使用热情。”由此也可以佐证外卖app的流行趋势，而现在正是将健身+外卖融合在一起，针对性极强，有力的弥补的这一片的市场空白，甚至开拓更广的市场人群。&ensp;&ensp;&ensp;&ensp;举例说一下市面上比较成熟的app，对它进行一定的分析。&ensp;&ensp;&ensp;&ensp;饿了吗app：有用户客户端和商家客户端，用户客户端可以在线查看周边商家，查看菜品价格，添加购物车，结账，实时监控自己订单情况以及运送情况。而商家则是可以通过客户端登记进入饿了吗平台，有接单、产品维护等操作。经过多年的磨练，现在已经是相当成熟的一个产品。对此，可以进行一定的原型开发，然后再打磨适应自己所需的一些需求功能。 参考文献: 《16年中国健身服务行业发展现状及未来市场规模预测分析》环球体育传媒 2016-12-07 http://www.askci.com/news/finance/20161206/14373481263_4.shtml《2016中国食品产业发展趋势报告》 餐饮食材资讯平台 http://mt.sohu.com/20151206/n429969127.shtml《运动饮食1:9》 森拓郎 著 2015.06 第一版《基于O2O模式的外卖订餐APP的设计研究》郑文静 2015.09《共享经济时代_私厨将向何处去》刘柳《河南省城市商业经营性健身俱乐部的运营现状与对策研究》李想 2016《基于使用与满足理论下大学生美团外卖APP使用研究》李宇涵 课题研究方案和主要内容： 方案 FitBody外卖app描述 本款app的目的和意义 国内外研究现状、水平和发展趋势 理论依据 对象与范围 研究的内容 1、FitBody外卖app描述&ensp;&ensp;&ensp;&ensp;本app分为客户端和商家端，两端各负其责。&ensp;&ensp;&ensp;&ensp;客户端，负责用户：正常浏览、下单、确认收货等正常外卖操作。&ensp;&ensp;&ensp;&ensp;商家端，订单的接收处理，自己店铺的相关维护。 2、本款app的目的和意义&ensp;&ensp;&ensp;&ensp;填补一定的健身餐饮这一特殊需求人群的市场空白，创造社会价值。引导让参与健身的人在正确饮食下，通过健身努力得到满意的身体素质。从而达到健康中国人，全民健身的发展战略。 3、国内外研究现状、水平和发展趋势&ensp;&ensp;&ensp;&ensp;健身方面，国外发展领先于中国，同时健身房配套设施也高于中国大部分配置，餐饮方面国外针对于高端用户的有，普通健身用户一般都是自己做或是餐馆，专业性的健身套餐外卖目前也是没有关注过。&ensp;&ensp;&ensp;&ensp;在中国，外卖的成熟的快速发展着两年肉眼可见的速度展现在我们面前，国内的外卖配送和监管可以说是比较成熟了。在未来，这个行业还会继续火热并且会更加的规范，然而在健身餐这个方面，国内还是比较少的，尤其是在外卖呢平台，网络平台有售卖需要自己二次加工的健身餐，但是价格相对高，受众面小。&ensp;&ensp;&ensp;&ensp;无论是健身行业还是餐饮行业在未来都会是社会上发展的比不可少的环节，火热的状态会一直持续下去，而现在所做的就是将二者合二为一，进行资源整合。 4、理论依据&ensp;&ensp;&ensp;&ensp;健身人群的增多以及饮食文化的快速发展。&ensp;&ensp;&ensp;&ensp;在统计中，现在每年出现在健身房的人群以及在广场等地点健身的人持续增长。就拿跑步，马拉松参加人数来比较，2013年参加人数50万人，在2016年达到150万人。由此可见，中国人在运动健身方法的投入是在持续增加。 5、对象与范围&ensp;&ensp;&ensp;&ensp;对象：健身人群、白领人群、学生人群。&ensp;&ensp;&ensp;&ensp;范围：当地城市外卖点餐可配送区域内。 6、研究的内容&ensp;&ensp;&ensp;&ensp;1)利用Xcode开发iOS应用&ensp;&ensp;&ensp;&ensp;2)Objective-C语言的使用&ensp;&ensp;&ensp;&ensp;3)swift3.0语言的使用&ensp;&ensp;&ensp;&ensp;4)HTML、CSS、JS、JQ等前台设计技术的使用&ensp;&ensp;&ensp;&ensp;5)app功能需求开发&ensp;&ensp;&ensp;&ensp;6)app内容的需求研究&ensp;&ensp;&ensp;&ensp;7)app页面设计相关研究&ensp;&ensp;&ensp;&ensp;8)数据库相关设计&ensp;&ensp;&ensp;&ensp;9)Git版本库的使用 研究方法及技术途径：调查问卷&ensp;&ensp;&ensp;&ensp;采取网上调研，针对性对用户进行投放，后台会自动统计内容。 需求分析&ensp;&ensp;&ensp;&ensp;面向对象的方式进行需求分析，结合调查问卷内容进行功能的设定。&ensp;&ensp;&ensp;&ensp;利用UML，进行实例图、流程图等分析图的绘制。 原型开发&ensp;&ensp;&ensp;&ensp;根据目前流行的外卖app进行分析，分析应用的布局和功能分布，然后进行快速开发，之后进行针对性优化。最终能够让用户使用起来上手快，无学习花费时间，增加使用亲切感与熟悉感。iOS应用开发技术上采用——&ensp;&ensp;&ensp;&ensp;Xcode8.2进行app开发:&ensp;&ensp;&ensp;&ensp;Xcode是苹果公司向开发人员提供的集成开发环境（非开源），用于开发Mac OS X、iOS的应用程序。 其前身是继承自NeXT的Project Builder，运行于苹果公司的Mac操作系统下。本应用是运行在苹果手机、平板上的应用程序。 开发语言:&ensp;&ensp;&ensp;&ensp;Objective-C，Objective-C是一种通用、高级、面向对象的编程语言。它扩展了标准的ANSI C编程语言，将Smalltalk式的消息传递机制加入到ANSI C 中。它是苹果的OSX和iOS操作系统，及其相关API、Cocoa 和Cocoa Touch的主要编程语言。Objective-C最初源于NeXTSTEP操作系统，之后在OSX和iOS继承下来。&ensp;&ensp;&ensp;&ensp;Swift3.0：SWIFT，苹果于2014年WWDC（苹果开发者大会）发布的新开发语言，可与Object-C共同运行于MAC OS和iOS平台，用于搭建基于苹果平台的应用程序。 本地数据库：&ensp;&ensp;&ensp;&ensp;SQLite3，SQLite是一款轻型的嵌入式数据库,它占用资源非常的低，在嵌入式设备中，可能只需要几百K的内存就足够了。它的处理速度比Mysql、PostgreSQL这两款著名的数据库都还快。SQLite提供的是一些C函数接口，你可以用这些函数操作数据库。通过使用这些接口，传递一些标准 sql 语句（以 char * 类型）给 SQLite函数，SQLite就会为你操作数据库。 WEB端技术:&ensp;&ensp;&ensp;&ensp;HTML5，Bootstrap响应式框架，JQuery库，CSS3。 测试 Xcode中自带的单元测试和UI测试。 第三方提供的免费内部测试。 真机测试，利用iPhone设备进行测试。 自动测试技术。 实施计划： 时间 任务 2017-02-01——2017-02-07 网上进行调查问卷 2017-02-08——2017-02-15 需求分析制作 2017-02-16——2017-02-20 架构和样式设计 2017-02-22——2017-03-10 FitBody客户端内容完成 2017-03-11——2017-03-31 FitBody商家端完成 2017-04-01——2017-04-10 测试 2017-04-11——2017-04-15 前端页面的完成 2017-04-20—— 完善论文","comments":true,"tags":[{"name":"毕业设计","slug":"毕业设计","permalink":"http://a5566baga.cn/tags/毕业设计/"}]},{"title":"H5知识简单总结","date":"2017-02-04T10:09:21.000Z","path":"2017/02/04/H5知识简单总结/","text":"H5知识点简单总结 新的语义标签audio和video标签完全支持CSS32D和3D的变换数学公式Canvas绘图SVG绘图本地存储 新的语义标签 标签 描述 article 定义页面独立的内容区域。 aside 定义页面的侧边栏内容。 bdi 允许您设置一段文本，使其脱离其父元素的文本方向设置。 command 定义命令按钮，比如单选按钮、复选框或按钮 details 用于描述文档或文档某个部分的细节 dialog 定义对话框，比如提示框 summary 标签包含 details 元素的标题 figure 规定独立的流内容（图像、图表、照片、代码等等）。 figc aption 定义 &lt;figure&gt; 元素的标题 footer 定义 section 或 document 的页脚。 header 定义了文档的头部区域 mark 定义带有记号的文本。 meter 定义度量衡。仅用于已知最大和最小值的度量。 nav 定义导航链接的部分。 progress 定义任何类型的任务的进度。 ruby 定义 ruby 注释（中文注音或字符）。 rt 定义字符（中文注音或字符）的解释或发音。 rp 在 ruby 注释中使用，定义不支持 ruby 元素的浏览器所显示的内容。 section 定义文档中的节（section、区段）。 time 定义日期或时间。 wbr 规定在文本中的何处适合添加换行符。 audio和video标签audio标签一般要对不支持的浏览器进行区分12345&lt;audio controls&gt; &lt;source src=\"horse.ogg\" type=\"audio/ogg\"&gt; &lt;source src=\"horse.mp3\" type=\"audio/mpeg\"&gt; 您的浏览器不支持 audio 元素。&lt;/audio&gt; &lt;source&gt;里面放的是资源文件路径 audio标签属性 属性 值 描述 autoplay autoplay 自动播放 controls controls 出现系统自带的控制控件，不同浏览器的也不一样 loop loop 循环，写上是一直重复播放 muted muted 静音 preload auto metadatanone 何时加载资源：自动，初始化加载，不加载 src URL 资源的URL source标签属性 属性 值 描述 type MIME_type 视频：video/oggvideo/mp4video/webm音频：audio/oggaudio/mpeg src URL 填写资源的URL video标签语法与audio大致相同，不过要注意控制video的大小要在video标签内写好，并且不要写“px”单位12345&lt;video width=\"320\" height=\"240\" controls&gt; &lt;source src=\"movie.mp4\" type=\"video/mp4\"&gt; &lt;source src=\"movie.ogg\" type=\"video/ogg\"&gt; 您的浏览器不支持 video 标签。&lt;/video&gt; video比audio多的一些属性 属性 值 描述 height 数字 设置播放器高度 width 数字 设置播放器的宽度 poster URL 视频未播放加载时候显示的封面内容 完全支持CSS3H5中已经完全支持了CSS里面的新属性，以及动画的变化。H5的声明变的非常简单1&lt;!DOCTYPE html&gt; 2D和3D的变换2D和3D的变换也是在CSS3中实现的，具体操作可以看—— CSS3之2D/3D动画 数学公式HTML5 可以在文档中使用 MathML 元素MathML 是数学标记语言，是一种基于XML（标准通用标记语言的子集）的标准，用来在互联网上书写数学符号和公式的置标语言。 显示a2+b2=c212345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt; &lt;mrow&gt; &lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt; &lt;mo&gt;+&lt;/mo&gt; &lt;msup&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt; &lt;mo&gt;=&lt;/mo&gt; &lt;msup&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt; &lt;/mrow&gt; &lt;/math&gt; &lt;/body&gt;&lt;/html&gt; 矩阵12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt; &lt;mrow&gt; &lt;mi&gt;A&lt;/mi&gt; &lt;mo&gt;=&lt;/mo&gt; &lt;mfenced open=\"[\" close=\"]\"&gt; &lt;mtable&gt; &lt;mtr&gt; &lt;mtd&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mtd&gt; &lt;mtd&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;/mtd&gt; &lt;/mtr&gt; &lt;mtr&gt; &lt;mtd&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;/mtd&gt; &lt;mtd&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;/mtd&gt; &lt;/mtr&gt; &lt;/mtable&gt; &lt;/mfenced&gt; &lt;/mrow&gt; &lt;/math&gt; &lt;/body&gt;&lt;/html&gt; Canvas绘图canvas是一个画布，对它进行操作要先在HTML文件中声明如果要对它位置进行设定的话，设定为display:block设置大小，请在标签设置，那样是可以绘制的大小1&lt;canvas id=\"myCanvas\" width=\"200\" height=\"100\"&gt;&lt;/canvas&gt; 开始与结束，最好是在一个图形的开始和结束添加12ctx.beginPath();ctx.closePath(); 样式线段粗细1ctx.lineWidth=10; 线段颜色1ctx.strokeStyle=\"#FF0000\"; 填充颜色1ctx.fillStyle=\"#FF0000\"; 线段绘制JS代码1234567var canvas = document.getElementById(\"canvas\");var ctx = canvas.getContext(\"2d\");ctx.beginPath();ctx.moveTo(100,20);ctx.lineTo(200,20);ctx.stroke();ctx.closePath(); 圆形绘制12345var c=document.getElementById(\"myCanvas\");var ctx=c.getContext(\"2d\");ctx.beginPath();ctx.arc(100,75,50,0,2*Math.PI);ctx.stroke(); 度数计算小技巧，这个计算结果就是1&deg;1var angle = Math.PI/180; 矩形绘制1234var c=document.getElementById(\"myCanvas\");var ctx=c.getContext(\"2d\");ctx.rect(20,20,150,100);ctx.stroke(); 文字绘制123456789101112131415var c=document.getElementById(\"myCanvas\");var ctx=c.getContext(\"2d\");ctx.font=\"20px Georgia\";ctx.fillText(\"Hello World!\",10,50);ctx.font=\"30px Verdana\";// Create gradientvar gradient=ctx.createLinearGradient(0,0,c.width,0);gradient.addColorStop(\"0\",\"magenta\");gradient.addColorStop(\"0.5\",\"blue\");gradient.addColorStop(\"1.0\",\"red\");// Fill with gradientctx.fillStyle=gradient;ctx.fillText(\"Big smile!\",10,90); 图片绘制1234567var c=document.getElementById(\"myCanvas\");var ctx=c.getContext(\"2d\");var img=document.getElementById(\"scream\");img.onload = function()&#123; ctx.drawImage(img,10,10);&#125; 线性渐变1234567891011var c=document.getElementById(\"myCanvas\");var ctx=c.getContext(\"2d\");// 创建渐变var grd=ctx.createLinearGradient(0,0,200,0);grd.addColorStop(0,\"red\");grd.addColorStop(1,\"white\");// 填充渐变ctx.fillStyle=grd;ctx.fillRect(10,10,150,80); 圆渐变1234567891011var c=document.getElementById(\"myCanvas\");var ctx=c.getContext(\"2d\");// 创建渐变var grd=ctx.createRadialGradient(75,50,5,90,60,100);grd.addColorStop(0,\"red\");grd.addColorStop(1,\"white\");// 填充渐变ctx.fillStyle=grd;ctx.fillRect(10,10,150,80); 更多的请看——Canv绘制奇奇怪怪图形 SVG绘图内联SVG1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" height=\"190\"&gt; &lt;polygon points=\"100,10 40,180 190,60 10,60 160,180\" style=\"fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;\"&gt;&lt;/svg&gt;&lt;/body&gt;&lt;/html&gt; 本地存储暂无，没有咋用过等用的时候再补吧~","comments":true,"tags":[{"name":"前台","slug":"前台","permalink":"http://a5566baga.cn/tags/前台/"}]},{"title":"部署GitHub-域名","date":"2017-02-03T13:11:28.000Z","path":"2017/02/03/部署GitHub-域名/","text":"学会怎么使用Hexo创建一篇博客，同时部署在GitHub，然后关联自己买的域名~ 1、创建博客2、提交到GitHub3、关联域名 创建博客命令1hexo new \"文件名字\" OK，如图所见，依旧是在根目录下进行bash，创建出来的是一个Markdown文件默认内容是—— title: 部署GitHub+域名date: 2017-02-03 21:11:28tags: 这里的【tags】与之前配置的“tags”是对应关系。 显示更多标签 推荐Markdown编辑器(Windows下) Atom 官网插件安装快捷键使用Markdown语法 Sublime Text 3 官网我现在不常用，有喜欢的自己百度一下吧~~~ GitBook Editor(最初用的，Mac和Win都有的，很适合写书，上手度还可以，可以上传github) 官网这个非常好用，就是对于写博客不太适合，资源不好整理 Mac 下的Markdown编辑器很多了，最常见的是mou，其它的自己可以多多尝试啊~ 提交到GitHub1、创建SSH创建bash，输入1$ ssh-keygen -t rsa -C \"邮件地址@youremail.com\" 然后回车，输入密码，重复密码(这里可以连续回车，以后提交都不用输入密码了，方便)注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；注意2: 此处的「-C」的是大写的「C」 2、添加到GitHub账号上打开GitHubid_rsa.pub文件里面内容 3、本地git设置，提交设置用户名和邮箱12$ git config --global user.name \"你的用户名\"$ git config --global user.email \"你的邮箱\" 安装hexo git1$ cnpm install hexo-deployer-git --save 发布到GitHub1$ hexo d -g - 登陆 用户名.github.io查看内容关联域名添加CNAME文件 在 public 文件夹下添加【CNAME】文件，注意：没有后缀名！！！ 里面第一行写，你的域名，注意：不加www！！！在腾讯云中添加DNS1$ hexo d -g 再重新提交一遍，OK，就可以看见自己的网站了。如果没有出现就等到第二天，如果还是没有，请检查配置内容，或是留言吧~ 完成，收工！常用命令~清空public文件夹，适用于删除一些博客，重新部署1hexo clean 生成静态文件，然后部署12hexo generatehexo deploy 提交1hexo d -g 运行在本地1hexo s -g 指令网站学习吧","comments":true,"tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://a5566baga.cn/tags/杂谈/"}]},{"title":"hexo-theme-yilia简单配置","date":"2017-02-03T11:55:45.000Z","path":"2017/02/03/hexo-theme-yilia简单配置/","text":"本文说明介绍hexo-theme-yilia的简单配置 本文简单配置yilia主题 1、作者注释的说明2、添加tag栏3、添加多说评论4、其它的注意事项 作者注释的说明作者github上的文档说明1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798# Headermenu: 主页: / 随笔: /tags/随笔/# SubNavsubnav: github: \"#\" weibo: \"#\" rss: \"#\" zhihu: \"#\" #qq: \"#\" #weixin: \"#\" #jianshu: \"#\" #douban: \"#\" #mail: \"mailto:litten225@qq.com\" #facebook: \"#\" #google: \"#\" #twitter: \"#\" #linkedin: \"#\"rss: /atom.xml# 是否需要修改 root 路径# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。root:# Content# 文章太长，截断按钮文字excerpt_link: more# 文章卡片右下角常驻链接，不需要请设置为falseshow_all_link: '展开全文'# 数学公式mathjax: false# 是否在新窗口打开链接open_in_new: false# 打赏# 请在需要打赏的文章的md文件头部，设置属性reward: true# 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏reward_type: 2# 打赏wordingreward_wording: '谢谢你请我吃糖果'# 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpgalipay:# 微信二维码图片地址weixin:# Miscellaneousbaidu_analytics: ''google_analytics: ''favicon: /favicon.png#你的头像urlavatar:#是否开启分享share_jia: true#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论duoshuo: false# 样式定制 - 一般不需要修改，除非有很强的定制欲望…style: # 头像上面的背景颜色 header: '#4d4d4d' # 右滑板块背景 slider: 'linear-gradient(200deg,#a0cfe4,#e8c37e)'# slider的设置slider: # 是否默认展开tags板块 showTags: false# 智能菜单# 如不需要，将该对应项置为false# 比如#smart_menu:# friends: falsesmart_menu: innerArchive: '所有文章' friends: '友链' aboutme: '关于我'friends: 友情链接1: http://localhost:4000/ 友情链接2: http://localhost:4000/ 友情链接3: http://localhost:4000/ 友情链接4: http://localhost:4000/ 友情链接5: http://localhost:4000/ 友情链接6: http://localhost:4000/aboutme: 很惭愧&lt;br&gt;&lt;br&gt;只做了一点微小的工作&lt;br&gt;谢谢大家 模块分析menu模块，可以随意添加，里面的内容是在创建之后，生成在tags文件夹下的，发布在github过后可以在浏览器中查看 123menu: 主页: / 随笔: /tags/随笔/ subnav模块，添加社交页面，把“#”更换为自己的账号链接即可 123subnav:github: \"#\"weibo: \"#\" Content模块，这里数学公式保持false就好 12345678910# Content# 文章太长，截断按钮文字excerpt_link: more# 文章卡片右下角常驻链接，不需要请设置为falseshow_all_link: '展开全文'# 数学公式mathjax: false# 是否在新窗口打开链接open_in_new: false 打赏模块，这个图片地址是在 source 目录下的，所以要在source下创建文件夹，然后把资源放进去，这样在启动服务在浏览器中的位置才是正确的，所以我们在编辑之后看效果要在部署以后看，本地可能是不同步的 1234567891011# 打赏# 请在需要打赏的文章的md文件头部，设置属性reward: true# 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏reward_type: 2# 打赏wordingreward_wording: '谢谢你请我吃糖果'# 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpgalipay:# 微信二维码图片地址weixin: Miscellaneous模块，前两个是设置百度和谷歌搜索的，favicon设置标签页图标的 1234# Miscellaneousbaidu_analytics: ''google_analytics: ''favicon: /favicon.png 其它的就没有什么难度了们自己改改看就好 添加tag栏这个就是tag栏一开始不是这么显示的，会提示错误，要加一段代码在根目录的_config.yml中123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: true link: false permalink: false excerpt: false categories: false tags: true 现在再打开看一下，是不是就好了~~~ 添加多说评论1、注册多说账号——多说官网2、多说的设置信息我们接下来会用到—— 域名密钥 3、修改文件修改文件是 themes–&gt;yilia文件夹–&gt;_config.yml 修改内容为——123#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论duoshuo: 密钥 themes–&gt;yilia–&gt;layout–&gt;_partial–&gt;post–&gt;duoshuo.ejs 修改内容为——在多说设置内复制，然后更改&lt;%%&gt;包住内容12345678910111213141516&lt;!-- 多说评论框 start --&gt; &lt;div class=\"ds-thread\" data-thread-key=\"&lt;%=key%&gt;\" data-title=\"&lt;%=title%&gt;\" data-url=\"&lt;%=url%&gt;\" style=\"margin:40px;border:4px solid #CCCCCC;padding:15px;border-radius:15px;\"&gt;&lt;/div&gt;&lt;!-- 多说评论框 end --&gt;&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;&lt;script type=\"text/javascript\"&gt;var duoshuoQuery = &#123;short_name:\"个人域名短名字\"&#125;; (function() &#123; var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js'; ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds); &#125;)(); &lt;/script&gt;&lt;!-- 多说公共JS代码 end --&gt; OK，目前为止，在本地上的操作到一段落，下面就要部署到github，并且关联域名咯~部署GitHub-域名","comments":true,"tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://a5566baga.cn/tags/杂谈/"}]},{"title":"hexo+github创建个人博客","date":"2017-02-03T08:59:47.000Z","path":"2017/02/03/hexo-github创建个人博客/","text":"本文通过Hexo+github以及腾讯云搭建一个个人博客 1、GitHub账户2、腾讯云账号以及域名3、Node.js环境4、Windows 下 Git环境本文操作环境为 Win7 64bit GitHub账号1、官网注册——https://github.com/ 2、创建仓库选择一个主题之后保存【save】就可以了然后访问 你的github用户名.github.io 就可以看到 腾讯云账号以及域名1、注册腾讯云——https://dnspod.qcloud.com/?from=qcloud/2、购买域名按照流程一步一步走下来即可 安装Node.js环境1、官网下载——https://nodejs.org/en/ 2、安装双击安装，一路【next】 安装Git环境1、官网下载Git——https://git-scm.com/ 2、安装一样，一路【next】 恭喜，没有出错就准备工作做好了~~~ 正文安装Hexo1、创建一个文件夹(英文命名) 2、启动 GitBsah 3、安装Hexo 切换源(换成淘宝的源) 1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 执行安装 1$ cnpm install -g hexo-cli 1$ cnpm install hexo --save 验证一下1$ hexo -v 初始化 1$ hexo init 安装生成器,保存到本地文件夹 1$ cnpm install 运行 1$ hexo s -g 打开浏览器 http://localhost:4000/【Ctrl】+【c】 停止运行 配置博客打开【_config.yml】 文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#博客名称title: 我的博客#副标题subtitle: 一天进步一点#简介description: 记录生活点滴#博客作者author: ben boss#博客语言language: zh-CN#时区timezone:#博客地址,与申请的GitHub一致url: http://username.github.ioroot: /#博客链接格式permalink: :year/:month/:day/:title/permalink_defaults:source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:new_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight:enable: trueline_number: trueauto_detect: truetab_replace:default_category: uncategorizedcategory_map:tag_map:#日期格式date_format: YYYY-MM-DDtime_format: HH:mm:ss#分页，每页文章数量per_page: 10pagination_dir: page#博客主题，选择其它主题，在这里是要将themes中的文件夹名替换这里的theme: landscape#发布设置deploy:type: git#elfwalk改为你的github用户名repository: https://github.com/username/username.github.io.git 到这里，本地搭建完成 安装主题 主题的介绍页面 https://github.com/hexojs/hexo/wiki/Themes 以hexo-theme-yilia举例——https://github.com/litten/hexo-theme-yilia看下一篇博客吧~~hexo-theme-yilia 简单配置","comments":true,"tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://a5566baga.cn/tags/杂谈/"}]}]